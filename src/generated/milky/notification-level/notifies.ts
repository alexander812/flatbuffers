// automatically generated by the FlatBuffers compiler, do not modify

import { OnAdded, OnAddedT } from '../../milky/notification-level/on-added.js';
import { OnEdited, OnEditedT } from '../../milky/notification-level/on-edited.js';
import { OnRemoved, OnRemovedT } from '../../milky/notification-level/on-removed.js';

export enum Notifies {
  NONE = 0,
  OnEdited = 1,
  OnAdded = 2,
  OnRemoved = 3,
}

export function unionToNotifies(
  type: Notifies,
  accessor: (obj: OnAdded | OnEdited | OnRemoved) => OnAdded | OnEdited | OnRemoved | null,
): OnAdded | OnEdited | OnRemoved | null {
  switch (Notifies[type]) {
    case 'NONE':
      return null;
    case 'OnEdited':
      return accessor(new OnEdited())! as OnEdited;
    case 'OnAdded':
      return accessor(new OnAdded())! as OnAdded;
    case 'OnRemoved':
      return accessor(new OnRemoved())! as OnRemoved;
    default:
      return null;
  }
}

export function unionListToNotifies(
  type: Notifies,
  accessor: (index: number, obj: OnAdded | OnEdited | OnRemoved) => OnAdded | OnEdited | OnRemoved | null,
  index: number,
): OnAdded | OnEdited | OnRemoved | null {
  switch (Notifies[type]) {
    case 'NONE':
      return null;
    case 'OnEdited':
      return accessor(index, new OnEdited())! as OnEdited;
    case 'OnAdded':
      return accessor(index, new OnAdded())! as OnAdded;
    case 'OnRemoved':
      return accessor(index, new OnRemoved())! as OnRemoved;
    default:
      return null;
  }
}
