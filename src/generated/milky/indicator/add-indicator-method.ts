// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { IndicatorIdT } from '../../milky/model/indicator/indicator-id.js';
import { IndicatorId } from '../../milky/model/indicator/indicator-id.js';
import { IndicatorType } from '../../milky/model/indicator/indicator-type.js';

export class AddIndicatorMethod implements flatbuffers.IUnpackableObject<AddIndicatorMethodT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): AddIndicatorMethod {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsAddIndicatorMethod(bb: flatbuffers.ByteBuffer, obj?: AddIndicatorMethod): AddIndicatorMethod {
    return (obj || new AddIndicatorMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsAddIndicatorMethod(
    bb: flatbuffers.ByteBuffer,
    obj?: AddIndicatorMethod,
  ): AddIndicatorMethod {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new AddIndicatorMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  indicatorId(obj?: IndicatorId): IndicatorId | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? (obj || new IndicatorId()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  type(): IndicatorType {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : IndicatorType.Undefined;
  }

  static startAddIndicatorMethod(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addIndicatorId(builder: flatbuffers.Builder, indicatorIdOffset: flatbuffers.Offset) {
    builder.addFieldStruct(0, indicatorIdOffset, 0);
  }

  static addType(builder: flatbuffers.Builder, type: IndicatorType) {
    builder.addFieldInt8(1, type, IndicatorType.Undefined);
  }

  static endAddIndicatorMethod(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // indicator_id
    return offset;
  }

  static createAddIndicatorMethod(
    builder: flatbuffers.Builder,
    indicatorIdOffset: flatbuffers.Offset,
    type: IndicatorType,
  ): flatbuffers.Offset {
    AddIndicatorMethod.startAddIndicatorMethod(builder);
    AddIndicatorMethod.addIndicatorId(builder, indicatorIdOffset);
    AddIndicatorMethod.addType(builder, type);
    return AddIndicatorMethod.endAddIndicatorMethod(builder);
  }

  unpack(): AddIndicatorMethodT {
    return new AddIndicatorMethodT(this.indicatorId() !== null ? this.indicatorId()!.unpack() : null, this.type());
  }

  unpackTo(_o: AddIndicatorMethodT): void {
    _o.indicatorId = this.indicatorId() !== null ? this.indicatorId()!.unpack() : null;
    _o.type = this.type();
  }
}

export class AddIndicatorMethodT implements flatbuffers.IGeneratedObject {
  constructor(public indicatorId: IndicatorIdT | null = null, public type: IndicatorType = IndicatorType.Undefined) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return AddIndicatorMethod.createAddIndicatorMethod(
      builder,
      this.indicatorId !== null ? this.indicatorId.pack(builder) : 0,
      this.type,
    );
  }
}
