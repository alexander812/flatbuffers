// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { ApiVersionT } from '../../../milky/model/version/api-version.js';
import { ApiVersion } from '../../../milky/model/version/api-version.js';

export class VersionInfo implements flatbuffers.IUnpackableObject<VersionInfoT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): VersionInfo {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsVersionInfo(bb: flatbuffers.ByteBuffer, obj?: VersionInfo): VersionInfo {
    return (obj || new VersionInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsVersionInfo(bb: flatbuffers.ByteBuffer, obj?: VersionInfo): VersionInfo {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new VersionInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  version(): string | null;
  version(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  version(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  gitSha(): string | null;
  gitSha(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  gitSha(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  api(obj?: ApiVersion): ApiVersion | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? (obj || new ApiVersion()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  static startVersionInfo(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addVersion(builder: flatbuffers.Builder, versionOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, versionOffset, 0);
  }

  static addGitSha(builder: flatbuffers.Builder, gitShaOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, gitShaOffset, 0);
  }

  static addApi(builder: flatbuffers.Builder, apiOffset: flatbuffers.Offset) {
    builder.addFieldStruct(2, apiOffset, 0);
  }

  static endVersionInfo(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  unpack(): VersionInfoT {
    return new VersionInfoT(this.version(), this.gitSha(), this.api() !== null ? this.api()!.unpack() : null);
  }

  unpackTo(_o: VersionInfoT): void {
    _o.version = this.version();
    _o.gitSha = this.gitSha();
    _o.api = this.api() !== null ? this.api()!.unpack() : null;
  }
}

export class VersionInfoT implements flatbuffers.IGeneratedObject {
  constructor(
    public version: string | Uint8Array | null = null,
    public gitSha: string | Uint8Array | null = null,
    public api: ApiVersionT | null = null,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const version = this.version !== null ? builder.createString(this.version) : 0;
    const gitSha = this.gitSha !== null ? builder.createString(this.gitSha) : 0;

    VersionInfo.startVersionInfo(builder);
    VersionInfo.addVersion(builder, version);
    VersionInfo.addGitSha(builder, gitSha);
    VersionInfo.addApi(builder, this.api !== null ? this.api.pack(builder) : 0);

    return VersionInfo.endVersionInfo(builder);
  }
}
