// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { DealLimitT } from '../../../milky/model/deal-limits/deal-limit.js';
import { DealLimit } from '../../../milky/model/deal-limits/deal-limit.js';
import type { DealLimitsGeneralT } from '../../../milky/model/deal-limits/deal-limits-general.js';
import { DealLimitsGeneral } from '../../../milky/model/deal-limits/deal-limits-general.js';

export class DealLimits implements flatbuffers.IUnpackableObject<DealLimitsT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): DealLimits {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsDealLimits(bb: flatbuffers.ByteBuffer, obj?: DealLimits): DealLimits {
    return (obj || new DealLimits()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsDealLimits(bb: flatbuffers.ByteBuffer, obj?: DealLimits): DealLimits {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new DealLimits()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  generalData(obj?: DealLimitsGeneral): DealLimitsGeneral | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? (obj || new DealLimitsGeneral()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  takeProfit(obj?: DealLimit): DealLimit | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? (obj || new DealLimit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  stopLoss(obj?: DealLimit): DealLimit | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? (obj || new DealLimit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  static startDealLimits(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addGeneralData(builder: flatbuffers.Builder, generalDataOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, generalDataOffset, 0);
  }

  static addTakeProfit(builder: flatbuffers.Builder, takeProfitOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, takeProfitOffset, 0);
  }

  static addStopLoss(builder: flatbuffers.Builder, stopLossOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, stopLossOffset, 0);
  }

  static endDealLimits(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // general_data
    builder.requiredField(offset, 6); // take_profit
    builder.requiredField(offset, 8); // stop_loss
    return offset;
  }

  unpack(): DealLimitsT {
    return new DealLimitsT(
      this.generalData() !== null ? this.generalData()!.unpack() : null,
      this.takeProfit() !== null ? this.takeProfit()!.unpack() : null,
      this.stopLoss() !== null ? this.stopLoss()!.unpack() : null,
    );
  }

  unpackTo(_o: DealLimitsT): void {
    _o.generalData = this.generalData() !== null ? this.generalData()!.unpack() : null;
    _o.takeProfit = this.takeProfit() !== null ? this.takeProfit()!.unpack() : null;
    _o.stopLoss = this.stopLoss() !== null ? this.stopLoss()!.unpack() : null;
  }
}

export class DealLimitsT implements flatbuffers.IGeneratedObject {
  constructor(
    public generalData: DealLimitsGeneralT | null = null,
    public takeProfit: DealLimitT | null = null,
    public stopLoss: DealLimitT | null = null,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const generalData = this.generalData !== null ? this.generalData.pack(builder) : 0;
    const takeProfit = this.takeProfit !== null ? this.takeProfit.pack(builder) : 0;
    const stopLoss = this.stopLoss !== null ? this.stopLoss.pack(builder) : 0;

    DealLimits.startDealLimits(builder);
    DealLimits.addGeneralData(builder, generalData);
    DealLimits.addTakeProfit(builder, takeProfit);
    DealLimits.addStopLoss(builder, stopLoss);

    return DealLimits.endDealLimits(builder);
  }
}
