// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { TimeT } from '../../milky/model/time.js';
import { Time } from '../../milky/model/time.js';

export class SetStartPositionTime implements flatbuffers.IUnpackableObject<SetStartPositionTimeT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): SetStartPositionTime {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsSetStartPositionTime(bb: flatbuffers.ByteBuffer, obj?: SetStartPositionTime): SetStartPositionTime {
    return (obj || new SetStartPositionTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsSetStartPositionTime(
    bb: flatbuffers.ByteBuffer,
    obj?: SetStartPositionTime,
  ): SetStartPositionTime {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new SetStartPositionTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  time(obj?: Time): Time | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  static startSetStartPositionTime(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addTime(builder: flatbuffers.Builder, timeOffset: flatbuffers.Offset) {
    builder.addFieldStruct(0, timeOffset, 0);
  }

  static endSetStartPositionTime(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // time
    return offset;
  }

  static createSetStartPositionTime(builder: flatbuffers.Builder, timeOffset: flatbuffers.Offset): flatbuffers.Offset {
    SetStartPositionTime.startSetStartPositionTime(builder);
    SetStartPositionTime.addTime(builder, timeOffset);
    return SetStartPositionTime.endSetStartPositionTime(builder);
  }

  unpack(): SetStartPositionTimeT {
    return new SetStartPositionTimeT(this.time() !== null ? this.time()!.unpack() : null);
  }

  unpackTo(_o: SetStartPositionTimeT): void {
    _o.time = this.time() !== null ? this.time()!.unpack() : null;
  }
}

export class SetStartPositionTimeT implements flatbuffers.IGeneratedObject {
  constructor(public time: TimeT | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return SetStartPositionTime.createSetStartPositionTime(builder, this.time !== null ? this.time.pack(builder) : 0);
  }
}
