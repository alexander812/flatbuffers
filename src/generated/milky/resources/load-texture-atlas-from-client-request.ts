// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { ResourceT } from '../../milky/resources/resource.js';
import { Resource } from '../../milky/resources/resource.js';

export class LoadTextureAtlasFromClientRequest
  implements flatbuffers.IUnpackableObject<LoadTextureAtlasFromClientRequestT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): LoadTextureAtlasFromClientRequest {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsLoadTextureAtlasFromClientRequest(
    bb: flatbuffers.ByteBuffer,
    obj?: LoadTextureAtlasFromClientRequest,
  ): LoadTextureAtlasFromClientRequest {
    return (obj || new LoadTextureAtlasFromClientRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsLoadTextureAtlasFromClientRequest(
    bb: flatbuffers.ByteBuffer,
    obj?: LoadTextureAtlasFromClientRequest,
  ): LoadTextureAtlasFromClientRequest {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new LoadTextureAtlasFromClientRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  baseName(): string | null;
  baseName(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  baseName(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  texture(obj?: Resource): Resource | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? (obj || new Resource()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  jsonDescription(obj?: Resource): Resource | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? (obj || new Resource()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  static startLoadTextureAtlasFromClientRequest(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addBaseName(builder: flatbuffers.Builder, baseNameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, baseNameOffset, 0);
  }

  static addTexture(builder: flatbuffers.Builder, textureOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, textureOffset, 0);
  }

  static addJsonDescription(builder: flatbuffers.Builder, jsonDescriptionOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, jsonDescriptionOffset, 0);
  }

  static endLoadTextureAtlasFromClientRequest(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // base_name
    builder.requiredField(offset, 6); // texture
    builder.requiredField(offset, 8); // json_description
    return offset;
  }

  unpack(): LoadTextureAtlasFromClientRequestT {
    return new LoadTextureAtlasFromClientRequestT(
      this.baseName(),
      this.texture() !== null ? this.texture()!.unpack() : null,
      this.jsonDescription() !== null ? this.jsonDescription()!.unpack() : null,
    );
  }

  unpackTo(_o: LoadTextureAtlasFromClientRequestT): void {
    _o.baseName = this.baseName();
    _o.texture = this.texture() !== null ? this.texture()!.unpack() : null;
    _o.jsonDescription = this.jsonDescription() !== null ? this.jsonDescription()!.unpack() : null;
  }
}

export class LoadTextureAtlasFromClientRequestT implements flatbuffers.IGeneratedObject {
  constructor(
    public baseName: string | Uint8Array | null = null,
    public texture: ResourceT | null = null,
    public jsonDescription: ResourceT | null = null,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const baseName = this.baseName !== null ? builder.createString(this.baseName) : 0;
    const texture = this.texture !== null ? this.texture.pack(builder) : 0;
    const jsonDescription = this.jsonDescription !== null ? this.jsonDescription.pack(builder) : 0;

    LoadTextureAtlasFromClientRequest.startLoadTextureAtlasFromClientRequest(builder);
    LoadTextureAtlasFromClientRequest.addBaseName(builder, baseName);
    LoadTextureAtlasFromClientRequest.addTexture(builder, texture);
    LoadTextureAtlasFromClientRequest.addJsonDescription(builder, jsonDescription);

    return LoadTextureAtlasFromClientRequest.endLoadTextureAtlasFromClientRequest(builder);
  }
}
