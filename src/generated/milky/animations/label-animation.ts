// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { BaseAnimationT } from '../../milky/animations/base-animation.js';
import { BaseAnimation } from '../../milky/animations/base-animation.js';
import { VerticalAnimationDirection } from '../../milky/animations/vertical-animation-direction.js';

export class LabelAnimation implements flatbuffers.IUnpackableObject<LabelAnimationT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): LabelAnimation {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsLabelAnimation(bb: flatbuffers.ByteBuffer, obj?: LabelAnimation): LabelAnimation {
    return (obj || new LabelAnimation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsLabelAnimation(bb: flatbuffers.ByteBuffer, obj?: LabelAnimation): LabelAnimation {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new LabelAnimation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  baseModel(obj?: BaseAnimation): BaseAnimation | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? (obj || new BaseAnimation()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  verticalDirection(): VerticalAnimationDirection {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : VerticalAnimationDirection.None;
  }

  static startLabelAnimation(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addBaseModel(builder: flatbuffers.Builder, baseModelOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, baseModelOffset, 0);
  }

  static addVerticalDirection(builder: flatbuffers.Builder, verticalDirection: VerticalAnimationDirection) {
    builder.addFieldInt32(1, verticalDirection, VerticalAnimationDirection.None);
  }

  static endLabelAnimation(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // base_model
    return offset;
  }

  static createLabelAnimation(
    builder: flatbuffers.Builder,
    baseModelOffset: flatbuffers.Offset,
    verticalDirection: VerticalAnimationDirection,
  ): flatbuffers.Offset {
    LabelAnimation.startLabelAnimation(builder);
    LabelAnimation.addBaseModel(builder, baseModelOffset);
    LabelAnimation.addVerticalDirection(builder, verticalDirection);
    return LabelAnimation.endLabelAnimation(builder);
  }

  unpack(): LabelAnimationT {
    return new LabelAnimationT(this.baseModel() !== null ? this.baseModel()!.unpack() : null, this.verticalDirection());
  }

  unpackTo(_o: LabelAnimationT): void {
    _o.baseModel = this.baseModel() !== null ? this.baseModel()!.unpack() : null;
    _o.verticalDirection = this.verticalDirection();
  }
}

export class LabelAnimationT implements flatbuffers.IGeneratedObject {
  constructor(
    public baseModel: BaseAnimationT | null = null,
    public verticalDirection: VerticalAnimationDirection = VerticalAnimationDirection.None,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const baseModel = this.baseModel !== null ? this.baseModel.pack(builder) : 0;

    return LabelAnimation.createLabelAnimation(builder, baseModel, this.verticalDirection);
  }
}
