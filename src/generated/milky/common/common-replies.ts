// automatically generated by the FlatBuffers compiler, do not modify

import { Error, ErrorT } from '../../milky/common/error.js';
import { Ok, OkT } from '../../milky/common/ok.js';
import { Unimplemented, UnimplementedT } from '../../milky/common/unimplemented.js';

export enum CommonReplies {
  NONE = 0,
  Ok = 1,
  Error = 2,
  Unimplemented = 3,
}

export function unionToCommonReplies(
  type: CommonReplies,
  accessor: (obj: Error | Ok | Unimplemented) => Error | Ok | Unimplemented | null,
): Error | Ok | Unimplemented | null {
  switch (CommonReplies[type]) {
    case 'NONE':
      return null;
    case 'Ok':
      return accessor(new Ok())! as Ok;
    case 'Error':
      return accessor(new Error())! as Error;
    case 'Unimplemented':
      return accessor(new Unimplemented())! as Unimplemented;
    default:
      return null;
  }
}

export function unionListToCommonReplies(
  type: CommonReplies,
  accessor: (index: number, obj: Error | Ok | Unimplemented) => Error | Ok | Unimplemented | null,
  index: number,
): Error | Ok | Unimplemented | null {
  switch (CommonReplies[type]) {
    case 'NONE':
      return null;
    case 'Ok':
      return accessor(index, new Ok())! as Ok;
    case 'Error':
      return accessor(index, new Error())! as Error;
    case 'Unimplemented':
      return accessor(index, new Unimplemented())! as Unimplemented;
    default:
      return null;
  }
}
