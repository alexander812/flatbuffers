// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { QuoteT } from '../../milky/model/quote.js';
import { Quote } from '../../milky/model/quote.js';
import type { DealIdT } from '../../milky/model/deal/deal-id.js';
import { DealId } from '../../milky/model/deal/deal-id.js';
import { StopOrderType } from '../../milky/model/deal-limits/stop-order-type.js';

export class NotifyEditLimit implements flatbuffers.IUnpackableObject<NotifyEditLimitT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): NotifyEditLimit {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsNotifyEditLimit(bb: flatbuffers.ByteBuffer, obj?: NotifyEditLimit): NotifyEditLimit {
    return (obj || new NotifyEditLimit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsNotifyEditLimit(bb: flatbuffers.ByteBuffer, obj?: NotifyEditLimit): NotifyEditLimit {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new NotifyEditLimit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  type(): StopOrderType {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : StopOrderType.StopLoss;
  }

  id(obj?: DealId): DealId | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? (obj || new DealId()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  value(obj?: Quote): Quote | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  static startNotifyEditLimit(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addType(builder: flatbuffers.Builder, type: StopOrderType) {
    builder.addFieldInt32(0, type, StopOrderType.StopLoss);
  }

  static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset) {
    builder.addFieldStruct(1, idOffset, 0);
  }

  static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {
    builder.addFieldStruct(2, valueOffset, 0);
  }

  static endNotifyEditLimit(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  unpack(): NotifyEditLimitT {
    return new NotifyEditLimitT(
      this.type(),
      this.id() !== null ? this.id()!.unpack() : null,
      this.value() !== null ? this.value()!.unpack() : null,
    );
  }

  unpackTo(_o: NotifyEditLimitT): void {
    _o.type = this.type();
    _o.id = this.id() !== null ? this.id()!.unpack() : null;
    _o.value = this.value() !== null ? this.value()!.unpack() : null;
  }
}

export class NotifyEditLimitT implements flatbuffers.IGeneratedObject {
  constructor(
    public type: StopOrderType = StopOrderType.StopLoss,
    public id: DealIdT | null = null,
    public value: QuoteT | null = null,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    NotifyEditLimit.startNotifyEditLimit(builder);
    NotifyEditLimit.addType(builder, this.type);
    NotifyEditLimit.addId(builder, this.id !== null ? this.id.pack(builder) : 0);
    NotifyEditLimit.addValue(builder, this.value !== null ? this.value.pack(builder) : 0);

    return NotifyEditLimit.endNotifyEditLimit(builder);
  }
}
