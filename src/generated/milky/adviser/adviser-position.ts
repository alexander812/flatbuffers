// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { AdviserIdT } from '../../milky/model/adviser/adviser-id.js';
import { AdviserId } from '../../milky/model/adviser/adviser-id.js';

export class AdviserPosition implements flatbuffers.IUnpackableObject<AdviserPositionT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): AdviserPosition {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsAdviserPosition(bb: flatbuffers.ByteBuffer, obj?: AdviserPosition): AdviserPosition {
    return (obj || new AdviserPosition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsAdviserPosition(bb: flatbuffers.ByteBuffer, obj?: AdviserPosition): AdviserPosition {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new AdviserPosition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  position(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  id(obj?: AdviserId): AdviserId | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? (obj || new AdviserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  static startAdviserPosition(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addPosition(builder: flatbuffers.Builder, position: number) {
    builder.addFieldInt32(0, position, 0);
  }

  static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, idOffset, 0);
  }

  static endAdviserPosition(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 6); // id
    return offset;
  }

  unpack(): AdviserPositionT {
    return new AdviserPositionT(this.position(), this.id() !== null ? this.id()!.unpack() : null);
  }

  unpackTo(_o: AdviserPositionT): void {
    _o.position = this.position();
    _o.id = this.id() !== null ? this.id()!.unpack() : null;
  }
}

export class AdviserPositionT implements flatbuffers.IGeneratedObject {
  constructor(public position: number = 0, public id: AdviserIdT | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const id = this.id !== null ? this.id.pack(builder) : 0;

    AdviserPosition.startAdviserPosition(builder);
    AdviserPosition.addPosition(builder, this.position);
    AdviserPosition.addId(builder, id);

    return AdviserPosition.endAdviserPosition(builder);
  }
}
