// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AdviserType } from '../../milky/adviser/adviser-type.js';
import type { AdviserIdT } from '../../milky/model/adviser/adviser-id.js';
import { AdviserId } from '../../milky/model/adviser/adviser-id.js';

export class AddAdviserMethod implements flatbuffers.IUnpackableObject<AddAdviserMethodT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): AddAdviserMethod {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsAddAdviserMethod(bb: flatbuffers.ByteBuffer, obj?: AddAdviserMethod): AddAdviserMethod {
    return (obj || new AddAdviserMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsAddAdviserMethod(bb: flatbuffers.ByteBuffer, obj?: AddAdviserMethod): AddAdviserMethod {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new AddAdviserMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  id(obj?: AdviserId): AdviserId | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? (obj || new AdviserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  type(): AdviserType {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : AdviserType.Undefined;
  }

  static startAddAdviserMethod(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, idOffset, 0);
  }

  static addType(builder: flatbuffers.Builder, type: AdviserType) {
    builder.addFieldInt8(1, type, AdviserType.Undefined);
  }

  static endAddAdviserMethod(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // id
    return offset;
  }

  static createAddAdviserMethod(
    builder: flatbuffers.Builder,
    idOffset: flatbuffers.Offset,
    type: AdviserType,
  ): flatbuffers.Offset {
    AddAdviserMethod.startAddAdviserMethod(builder);
    AddAdviserMethod.addId(builder, idOffset);
    AddAdviserMethod.addType(builder, type);
    return AddAdviserMethod.endAddAdviserMethod(builder);
  }

  unpack(): AddAdviserMethodT {
    return new AddAdviserMethodT(this.id() !== null ? this.id()!.unpack() : null, this.type());
  }

  unpackTo(_o: AddAdviserMethodT): void {
    _o.id = this.id() !== null ? this.id()!.unpack() : null;
    _o.type = this.type();
  }
}

export class AddAdviserMethodT implements flatbuffers.IGeneratedObject {
  constructor(public id: AdviserIdT | null = null, public type: AdviserType = AdviserType.Undefined) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const id = this.id !== null ? this.id.pack(builder) : 0;

    return AddAdviserMethod.createAddAdviserMethod(builder, id, this.type);
  }
}
