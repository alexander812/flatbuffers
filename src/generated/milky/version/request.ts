// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { RequestParams } from '../../milky/version/request-params.js';

export class Request implements flatbuffers.IUnpackableObject<RequestT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Request {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsRequest(bb: flatbuffers.ByteBuffer, obj?: Request): Request {
    return (obj || new Request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsRequest(bb: flatbuffers.ByteBuffer, obj?: Request): Request {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  params(): RequestParams {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint8(this.bb_pos + offset) : 7;
  }

  static startRequest(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addParams(builder: flatbuffers.Builder, params: RequestParams) {
    builder.addFieldInt8(0, params, 7);
  }

  static endRequest(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createRequest(builder: flatbuffers.Builder, params: RequestParams): flatbuffers.Offset {
    Request.startRequest(builder);
    Request.addParams(builder, params);
    return Request.endRequest(builder);
  }

  unpack(): RequestT {
    return new RequestT(this.params());
  }

  unpackTo(_o: RequestT): void {
    _o.params = this.params();
  }
}

export class RequestT implements flatbuffers.IGeneratedObject {
  constructor(public params: RequestParams = 7) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return Request.createRequest(builder, this.params);
  }
}
