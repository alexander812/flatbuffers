// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { QuotesHistoryT } from '../../milky/model/quotes/quotes-history.js';
import { QuotesHistory } from '../../milky/model/quotes/quotes-history.js';

export class PushHistory implements flatbuffers.IUnpackableObject<PushHistoryT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): PushHistory {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsPushHistory(bb: flatbuffers.ByteBuffer, obj?: PushHistory): PushHistory {
    return (obj || new PushHistory()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsPushHistory(bb: flatbuffers.ByteBuffer, obj?: PushHistory): PushHistory {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new PushHistory()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  history(obj?: QuotesHistory): QuotesHistory | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? (obj || new QuotesHistory()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  static startPushHistory(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addHistory(builder: flatbuffers.Builder, historyOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, historyOffset, 0);
  }

  static endPushHistory(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // history
    return offset;
  }

  static createPushHistory(builder: flatbuffers.Builder, historyOffset: flatbuffers.Offset): flatbuffers.Offset {
    PushHistory.startPushHistory(builder);
    PushHistory.addHistory(builder, historyOffset);
    return PushHistory.endPushHistory(builder);
  }

  unpack(): PushHistoryT {
    return new PushHistoryT(this.history() !== null ? this.history()!.unpack() : null);
  }

  unpackTo(_o: PushHistoryT): void {
    _o.history = this.history() !== null ? this.history()!.unpack() : null;
  }
}

export class PushHistoryT implements flatbuffers.IGeneratedObject {
  constructor(public history: QuotesHistoryT | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const history = this.history !== null ? this.history.pack(builder) : 0;

    return PushHistory.createPushHistory(builder, history);
  }
}
