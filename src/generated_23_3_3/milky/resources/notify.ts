// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DynamicResource, DynamicResourceT } from '../../milky/resources/dynamic-resource.js';
import { ResourceRequest, unionToResourceRequest, unionListToResourceRequest } from '../../milky/resources/resource-request.js';
import { StaticResource, StaticResourceT } from '../../milky/resources/static-resource.js';


export class Notify implements flatbuffers.IUnpackableObject<NotifyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Notify {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNotify(bb:flatbuffers.ByteBuffer, obj?:Notify):Notify {
  return (obj || new Notify()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNotify(bb:flatbuffers.ByteBuffer, obj?:Notify):Notify {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Notify()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

requestType():ResourceRequest {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ResourceRequest.NONE;
}

request<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startNotify(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRequestType(builder:flatbuffers.Builder, requestType:ResourceRequest) {
  builder.addFieldInt8(0, requestType, ResourceRequest.NONE);
}

static addRequest(builder:flatbuffers.Builder, requestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, requestOffset, 0);
}

static endNotify(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNotify(builder:flatbuffers.Builder, requestType:ResourceRequest, requestOffset:flatbuffers.Offset):flatbuffers.Offset {
  Notify.startNotify(builder);
  Notify.addRequestType(builder, requestType);
  Notify.addRequest(builder, requestOffset);
  return Notify.endNotify(builder);
}

unpack(): NotifyT {
  return new NotifyT(
    this.requestType(),
    (() => {
      const temp = unionToResourceRequest(this.requestType(), this.request.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: NotifyT): void {
  _o.requestType = this.requestType();
  _o.request = (() => {
      const temp = unionToResourceRequest(this.requestType(), this.request.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class NotifyT implements flatbuffers.IGeneratedObject {
constructor(
  public requestType: ResourceRequest = ResourceRequest.NONE,
  public request: DynamicResourceT|StaticResourceT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const request = builder.createObjectOffset(this.request);

  return Notify.createNotify(builder,
    this.requestType,
    request
  );
}
}
