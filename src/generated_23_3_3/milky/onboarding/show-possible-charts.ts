// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ShowPossibleCharts implements flatbuffers.IUnpackableObject<ShowPossibleChartsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ShowPossibleCharts {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsShowPossibleCharts(bb:flatbuffers.ByteBuffer, obj?:ShowPossibleCharts):ShowPossibleCharts {
  return (obj || new ShowPossibleCharts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsShowPossibleCharts(bb:flatbuffers.ByteBuffer, obj?:ShowPossibleCharts):ShowPossibleCharts {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ShowPossibleCharts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startShowPossibleCharts(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endShowPossibleCharts(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createShowPossibleCharts(builder:flatbuffers.Builder):flatbuffers.Offset {
  ShowPossibleCharts.startShowPossibleCharts(builder);
  return ShowPossibleCharts.endShowPossibleCharts(builder);
}

unpack(): ShowPossibleChartsT {
  return new ShowPossibleChartsT();
}


unpackTo(_o: ShowPossibleChartsT): void {}
}

export class ShowPossibleChartsT implements flatbuffers.IGeneratedObject {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ShowPossibleCharts.createShowPossibleCharts(builder);
}
}
