// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DealModel, DealModelT } from '../../milky/model/deal/deal-model.js';


export class UpdateDeals implements flatbuffers.IUnpackableObject<UpdateDealsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateDeals {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateDeals(bb:flatbuffers.ByteBuffer, obj?:UpdateDeals):UpdateDeals {
  return (obj || new UpdateDeals()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateDeals(bb:flatbuffers.ByteBuffer, obj?:UpdateDeals):UpdateDeals {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateDeals()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

deals(index: number, obj?:DealModel):DealModel|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DealModel()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dealsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startUpdateDeals(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDeals(builder:flatbuffers.Builder, dealsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dealsOffset, 0);
}

static createDealsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDealsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endUpdateDeals(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // deals
  return offset;
}

static createUpdateDeals(builder:flatbuffers.Builder, dealsOffset:flatbuffers.Offset):flatbuffers.Offset {
  UpdateDeals.startUpdateDeals(builder);
  UpdateDeals.addDeals(builder, dealsOffset);
  return UpdateDeals.endUpdateDeals(builder);
}

unpack(): UpdateDealsT {
  return new UpdateDealsT(
    this.bb!.createObjList<DealModel, DealModelT>(this.deals.bind(this), this.dealsLength())
  );
}


unpackTo(_o: UpdateDealsT): void {
  _o.deals = this.bb!.createObjList<DealModel, DealModelT>(this.deals.bind(this), this.dealsLength());
}
}

export class UpdateDealsT implements flatbuffers.IGeneratedObject {
constructor(
  public deals: (DealModelT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const deals = UpdateDeals.createDealsVector(builder, builder.createObjectOffsetList(this.deals));

  return UpdateDeals.createUpdateDeals(builder,
    deals
  );
}
}
