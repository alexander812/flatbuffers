// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Time, TimeT } from '../../milky/model/time.js';


export class DealExpiration implements flatbuffers.IUnpackableObject<DealExpirationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DealExpiration {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDealExpiration(bb:flatbuffers.ByteBuffer, obj?:DealExpiration):DealExpiration {
  return (obj || new DealExpiration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDealExpiration(bb:flatbuffers.ByteBuffer, obj?:DealExpiration):DealExpiration {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DealExpiration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

expiration(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startDealExpiration(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addExpiration(builder:flatbuffers.Builder, expirationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, expirationOffset, 0);
}

static endDealExpiration(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // expiration
  return offset;
}

static createDealExpiration(builder:flatbuffers.Builder, expirationOffset:flatbuffers.Offset):flatbuffers.Offset {
  DealExpiration.startDealExpiration(builder);
  DealExpiration.addExpiration(builder, expirationOffset);
  return DealExpiration.endDealExpiration(builder);
}

unpack(): DealExpirationT {
  return new DealExpirationT(
    (this.expiration() !== null ? this.expiration()!.unpack() : null)
  );
}


unpackTo(_o: DealExpirationT): void {
  _o.expiration = (this.expiration() !== null ? this.expiration()!.unpack() : null);
}
}

export class DealExpirationT implements flatbuffers.IGeneratedObject {
constructor(
  public expiration: TimeT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return DealExpiration.createDealExpiration(builder,
    (this.expiration !== null ? this.expiration!.pack(builder) : 0)
  );
}
}
