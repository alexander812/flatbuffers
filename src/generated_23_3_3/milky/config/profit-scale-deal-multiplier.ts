// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ProfitScaleDealMultiplier implements flatbuffers.IUnpackableObject<ProfitScaleDealMultiplierT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ProfitScaleDealMultiplier {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProfitScaleDealMultiplier(bb:flatbuffers.ByteBuffer, obj?:ProfitScaleDealMultiplier):ProfitScaleDealMultiplier {
  return (obj || new ProfitScaleDealMultiplier()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProfitScaleDealMultiplier(bb:flatbuffers.ByteBuffer, obj?:ProfitScaleDealMultiplier):ProfitScaleDealMultiplier {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProfitScaleDealMultiplier()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

multiplier():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startProfitScaleDealMultiplier(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMultiplier(builder:flatbuffers.Builder, multiplier:number) {
  builder.addFieldFloat64(0, multiplier, 0.0);
}

static endProfitScaleDealMultiplier(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createProfitScaleDealMultiplier(builder:flatbuffers.Builder, multiplier:number):flatbuffers.Offset {
  ProfitScaleDealMultiplier.startProfitScaleDealMultiplier(builder);
  ProfitScaleDealMultiplier.addMultiplier(builder, multiplier);
  return ProfitScaleDealMultiplier.endProfitScaleDealMultiplier(builder);
}

unpack(): ProfitScaleDealMultiplierT {
  return new ProfitScaleDealMultiplierT(
    this.multiplier()
  );
}


unpackTo(_o: ProfitScaleDealMultiplierT): void {
  _o.multiplier = this.multiplier();
}
}

export class ProfitScaleDealMultiplierT implements flatbuffers.IGeneratedObject {
constructor(
  public multiplier: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ProfitScaleDealMultiplier.createProfitScaleDealMultiplier(builder,
    this.multiplier
  );
}
}
