// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Quote, QuoteT } from '../../../milky/model/quote.js';
import { Time, TimeT } from '../../../milky/model/time.js';
import { AdviserSignalDirection } from '../../../milky/model/adviser/adviser-signal-direction.js';


export class AdviserModel implements flatbuffers.IUnpackableObject<AdviserModelT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AdviserModel {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAdviserModel(bb:flatbuffers.ByteBuffer, obj?:AdviserModel):AdviserModel {
  return (obj || new AdviserModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAdviserModel(bb:flatbuffers.ByteBuffer, obj?:AdviserModel):AdviserModel {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AdviserModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

showSignal():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

direction():AdviserSignalDirection {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : AdviserSignalDirection.Undefined;
}

expiration(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

stopLoss(obj?:Quote):Quote|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startAdviserModel(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addShowSignal(builder:flatbuffers.Builder, showSignal:boolean) {
  builder.addFieldInt8(0, +showSignal, +false);
}

static addDirection(builder:flatbuffers.Builder, direction:AdviserSignalDirection) {
  builder.addFieldInt32(1, direction, AdviserSignalDirection.Undefined);
}

static addExpiration(builder:flatbuffers.Builder, expirationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, expirationOffset, 0);
}

static addStopLoss(builder:flatbuffers.Builder, stopLossOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, stopLossOffset, 0);
}

static endAdviserModel(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // expiration
  builder.requiredField(offset, 10) // stop_loss
  return offset;
}


unpack(): AdviserModelT {
  return new AdviserModelT(
    this.showSignal(),
    this.direction(),
    (this.expiration() !== null ? this.expiration()!.unpack() : null),
    (this.stopLoss() !== null ? this.stopLoss()!.unpack() : null)
  );
}


unpackTo(_o: AdviserModelT): void {
  _o.showSignal = this.showSignal();
  _o.direction = this.direction();
  _o.expiration = (this.expiration() !== null ? this.expiration()!.unpack() : null);
  _o.stopLoss = (this.stopLoss() !== null ? this.stopLoss()!.unpack() : null);
}
}

export class AdviserModelT implements flatbuffers.IGeneratedObject {
constructor(
  public showSignal: boolean = false,
  public direction: AdviserSignalDirection = AdviserSignalDirection.Undefined,
  public expiration: TimeT|null = null,
  public stopLoss: QuoteT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  AdviserModel.startAdviserModel(builder);
  AdviserModel.addShowSignal(builder, this.showSignal);
  AdviserModel.addDirection(builder, this.direction);
  AdviserModel.addExpiration(builder, (this.expiration !== null ? this.expiration!.pack(builder) : 0));
  AdviserModel.addStopLoss(builder, (this.stopLoss !== null ? this.stopLoss!.pack(builder) : 0));

  return AdviserModel.endAdviserModel(builder);
}
}
