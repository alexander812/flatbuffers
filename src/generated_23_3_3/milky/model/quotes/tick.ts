// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Quote, QuoteT } from '../../../milky/model/quote.js';
import { Time, TimeT } from '../../../milky/model/time.js';


export class Tick implements flatbuffers.IUnpackableObject<TickT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Tick {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTick(bb:flatbuffers.ByteBuffer, obj?:Tick):Tick {
  return (obj || new Tick()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTick(bb:flatbuffers.ByteBuffer, obj?:Tick):Tick {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Tick()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

quote(obj?:Quote):Quote|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
}

timestamp(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startTick(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addQuote(builder:flatbuffers.Builder, quoteOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, quoteOffset, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestampOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, timestampOffset, 0);
}

static endTick(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // quote
  builder.requiredField(offset, 6) // timestamp
  return offset;
}


unpack(): TickT {
  return new TickT(
    (this.quote() !== null ? this.quote()!.unpack() : null),
    (this.timestamp() !== null ? this.timestamp()!.unpack() : null)
  );
}


unpackTo(_o: TickT): void {
  _o.quote = (this.quote() !== null ? this.quote()!.unpack() : null);
  _o.timestamp = (this.timestamp() !== null ? this.timestamp()!.unpack() : null);
}
}

export class TickT implements flatbuffers.IGeneratedObject {
constructor(
  public quote: QuoteT|null = null,
  public timestamp: TimeT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  Tick.startTick(builder);
  Tick.addQuote(builder, (this.quote !== null ? this.quote!.pack(builder) : 0));
  Tick.addTimestamp(builder, (this.timestamp !== null ? this.timestamp!.pack(builder) : 0));

  return Tick.endTick(builder);
}
}
