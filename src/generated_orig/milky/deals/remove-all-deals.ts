// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { DealType } from '../../milky/model/deal/deal-type.js';

export class RemoveAllDeals implements flatbuffers.IUnpackableObject<RemoveAllDealsT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): RemoveAllDeals {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsRemoveAllDeals(bb: flatbuffers.ByteBuffer, obj?: RemoveAllDeals): RemoveAllDeals {
    return (obj || new RemoveAllDeals()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsRemoveAllDeals(bb: flatbuffers.ByteBuffer, obj?: RemoveAllDeals): RemoveAllDeals {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new RemoveAllDeals()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  types(index: number): DealType | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  typesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  typesArray(): Int32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? new Int32Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset),
        )
      : null;
  }

  static startRemoveAllDeals(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addTypes(builder: flatbuffers.Builder, typesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, typesOffset, 0);
  }

  static createTypesVector(builder: flatbuffers.Builder, data: DealType[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!);
    }
    return builder.endVector();
  }

  static startTypesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endRemoveAllDeals(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createRemoveAllDeals(builder: flatbuffers.Builder, typesOffset: flatbuffers.Offset): flatbuffers.Offset {
    RemoveAllDeals.startRemoveAllDeals(builder);
    RemoveAllDeals.addTypes(builder, typesOffset);
    return RemoveAllDeals.endRemoveAllDeals(builder);
  }

  unpack(): RemoveAllDealsT {
    return new RemoveAllDealsT(this.bb!.createScalarList<DealType>(this.types.bind(this), this.typesLength()));
  }

  unpackTo(_o: RemoveAllDealsT): void {
    _o.types = this.bb!.createScalarList<DealType>(this.types.bind(this), this.typesLength());
  }
}

export class RemoveAllDealsT implements flatbuffers.IGeneratedObject {
  constructor(public types: DealType[] = []) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const types = RemoveAllDeals.createTypesVector(builder, this.types);

    return RemoveAllDeals.createRemoveAllDeals(builder, types);
  }
}
