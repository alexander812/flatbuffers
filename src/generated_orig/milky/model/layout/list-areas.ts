// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { AreaInfoT } from '../../../milky/model/layout/area-info.js';
import { AreaInfo } from '../../../milky/model/layout/area-info.js';

export class ListAreas implements flatbuffers.IUnpackableObject<ListAreasT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ListAreas {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsListAreas(bb: flatbuffers.ByteBuffer, obj?: ListAreas): ListAreas {
    return (obj || new ListAreas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsListAreas(bb: flatbuffers.ByteBuffer, obj?: ListAreas): ListAreas {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ListAreas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  data(index: number, obj?: AreaInfo): AreaInfo | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new AreaInfo()).__init(
          this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
          this.bb!,
        )
      : null;
  }

  dataLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startListAreas(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, dataOffset, 0);
  }

  static createDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startDataVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endListAreas(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // data
    return offset;
  }

  static createListAreas(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset): flatbuffers.Offset {
    ListAreas.startListAreas(builder);
    ListAreas.addData(builder, dataOffset);
    return ListAreas.endListAreas(builder);
  }

  unpack(): ListAreasT {
    return new ListAreasT(this.bb!.createObjList<AreaInfo, AreaInfoT>(this.data.bind(this), this.dataLength()));
  }

  unpackTo(_o: ListAreasT): void {
    _o.data = this.bb!.createObjList<AreaInfo, AreaInfoT>(this.data.bind(this), this.dataLength());
  }
}

export class ListAreasT implements flatbuffers.IGeneratedObject {
  constructor(public data: AreaInfoT[] = []) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const data = ListAreas.createDataVector(builder, builder.createObjectOffsetList(this.data));

    return ListAreas.createListAreas(builder, data);
  }
}
