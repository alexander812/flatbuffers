// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { LabelDirection } from '../../../milky/model/deal/label-direction.js';
import { LabelLayout } from '../../../milky/model/deal/label-layout.js';
import { LabelShape } from '../../../milky/model/deal/label-shape.js';
import { LabelType } from '../../../milky/model/deal/label-type.js';
import { ShowUpAnimation } from '../../../milky/model/deal/show-up-animation.js';

export class LabelProperties implements flatbuffers.IUnpackableObject<LabelPropertiesT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): LabelProperties {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsLabelProperties(bb: flatbuffers.ByteBuffer, obj?: LabelProperties): LabelProperties {
    return (obj || new LabelProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsLabelProperties(bb: flatbuffers.ByteBuffer, obj?: LabelProperties): LabelProperties {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new LabelProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  type(): LabelType {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : LabelType.General;
  }

  shape(): LabelShape {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : LabelShape.Default;
  }

  direction(): LabelDirection {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : LabelDirection.Uninitialized;
  }

  text(): string | null;
  text(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  text(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  layout(): LabelLayout {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : LabelLayout.Default;
  }

  animation(): ShowUpAnimation {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : ShowUpAnimation.No;
  }

  imgId(): number {
    const offset = this.bb!.__offset(this.bb_pos, 16);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : -1;
  }

  isFilling(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 18);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
  }

  static startLabelProperties(builder: flatbuffers.Builder) {
    builder.startObject(8);
  }

  static addType(builder: flatbuffers.Builder, type: LabelType) {
    builder.addFieldInt32(0, type, LabelType.General);
  }

  static addShape(builder: flatbuffers.Builder, shape: LabelShape) {
    builder.addFieldInt32(1, shape, LabelShape.Default);
  }

  static addDirection(builder: flatbuffers.Builder, direction: LabelDirection) {
    builder.addFieldInt32(2, direction, LabelDirection.Uninitialized);
  }

  static addText(builder: flatbuffers.Builder, textOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, textOffset, 0);
  }

  static addLayout(builder: flatbuffers.Builder, layout: LabelLayout) {
    builder.addFieldInt32(4, layout, LabelLayout.Default);
  }

  static addAnimation(builder: flatbuffers.Builder, animation: ShowUpAnimation) {
    builder.addFieldInt32(5, animation, ShowUpAnimation.No);
  }

  static addImgId(builder: flatbuffers.Builder, imgId: number) {
    builder.addFieldInt32(6, imgId, -1);
  }

  static addIsFilling(builder: flatbuffers.Builder, isFilling: boolean) {
    builder.addFieldInt8(7, +isFilling, +true);
  }

  static endLabelProperties(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createLabelProperties(
    builder: flatbuffers.Builder,
    type: LabelType,
    shape: LabelShape,
    direction: LabelDirection,
    textOffset: flatbuffers.Offset,
    layout: LabelLayout,
    animation: ShowUpAnimation,
    imgId: number,
    isFilling: boolean,
  ): flatbuffers.Offset {
    LabelProperties.startLabelProperties(builder);
    LabelProperties.addType(builder, type);
    LabelProperties.addShape(builder, shape);
    LabelProperties.addDirection(builder, direction);
    LabelProperties.addText(builder, textOffset);
    LabelProperties.addLayout(builder, layout);
    LabelProperties.addAnimation(builder, animation);
    LabelProperties.addImgId(builder, imgId);
    LabelProperties.addIsFilling(builder, isFilling);
    return LabelProperties.endLabelProperties(builder);
  }

  unpack(): LabelPropertiesT {
    return new LabelPropertiesT(
      this.type(),
      this.shape(),
      this.direction(),
      this.text(),
      this.layout(),
      this.animation(),
      this.imgId(),
      this.isFilling(),
    );
  }

  unpackTo(_o: LabelPropertiesT): void {
    _o.type = this.type();
    _o.shape = this.shape();
    _o.direction = this.direction();
    _o.text = this.text();
    _o.layout = this.layout();
    _o.animation = this.animation();
    _o.imgId = this.imgId();
    _o.isFilling = this.isFilling();
  }
}

export class LabelPropertiesT implements flatbuffers.IGeneratedObject {
  constructor(
    public type: LabelType = LabelType.General,
    public shape: LabelShape = LabelShape.Default,
    public direction: LabelDirection = LabelDirection.Uninitialized,
    public text: string | Uint8Array | null = null,
    public layout: LabelLayout = LabelLayout.Default,
    public animation: ShowUpAnimation = ShowUpAnimation.No,
    public imgId: number = -1,
    public isFilling: boolean = true,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const text = this.text !== null ? builder.createString(this.text) : 0;

    return LabelProperties.createLabelProperties(
      builder,
      this.type,
      this.shape,
      this.direction,
      text,
      this.layout,
      this.animation,
      this.imgId,
      this.isFilling,
    );
  }
}
