// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { QuoteT } from '../../../milky/model/quote.js';
import { Quote } from '../../../milky/model/quote.js';

export class DealLimit implements flatbuffers.IUnpackableObject<DealLimitT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): DealLimit {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsDealLimit(bb: flatbuffers.ByteBuffer, obj?: DealLimit): DealLimit {
    return (obj || new DealLimit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsDealLimit(bb: flatbuffers.ByteBuffer, obj?: DealLimit): DealLimit {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new DealLimit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  typeText(): string | null;
  typeText(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  typeText(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  valueText(): string | null;
  valueText(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  valueText(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  percentText(): string | null;
  percentText(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  percentText(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  limitQuote(obj?: Quote): Quote | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  minQuote(obj?: Quote): Quote | null {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  maxQuote(obj?: Quote): Quote | null {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  boundQuote(obj?: Quote): Quote | null {
    const offset = this.bb!.__offset(this.bb_pos, 16);
    return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  isEnabled(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 18);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  static startDealLimit(builder: flatbuffers.Builder) {
    builder.startObject(8);
  }

  static addTypeText(builder: flatbuffers.Builder, typeTextOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, typeTextOffset, 0);
  }

  static addValueText(builder: flatbuffers.Builder, valueTextOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, valueTextOffset, 0);
  }

  static addPercentText(builder: flatbuffers.Builder, percentTextOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, percentTextOffset, 0);
  }

  static addLimitQuote(builder: flatbuffers.Builder, limitQuoteOffset: flatbuffers.Offset) {
    builder.addFieldStruct(3, limitQuoteOffset, 0);
  }

  static addMinQuote(builder: flatbuffers.Builder, minQuoteOffset: flatbuffers.Offset) {
    builder.addFieldStruct(4, minQuoteOffset, 0);
  }

  static addMaxQuote(builder: flatbuffers.Builder, maxQuoteOffset: flatbuffers.Offset) {
    builder.addFieldStruct(5, maxQuoteOffset, 0);
  }

  static addBoundQuote(builder: flatbuffers.Builder, boundQuoteOffset: flatbuffers.Offset) {
    builder.addFieldStruct(6, boundQuoteOffset, 0);
  }

  static addIsEnabled(builder: flatbuffers.Builder, isEnabled: boolean) {
    builder.addFieldInt8(7, +isEnabled, +false);
  }

  static endDealLimit(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 10); // limit_quote
    builder.requiredField(offset, 12); // min_quote
    builder.requiredField(offset, 14); // max_quote
    builder.requiredField(offset, 16); // bound_quote
    return offset;
  }

  unpack(): DealLimitT {
    return new DealLimitT(
      this.typeText(),
      this.valueText(),
      this.percentText(),
      this.limitQuote() !== null ? this.limitQuote()!.unpack() : null,
      this.minQuote() !== null ? this.minQuote()!.unpack() : null,
      this.maxQuote() !== null ? this.maxQuote()!.unpack() : null,
      this.boundQuote() !== null ? this.boundQuote()!.unpack() : null,
      this.isEnabled(),
    );
  }

  unpackTo(_o: DealLimitT): void {
    _o.typeText = this.typeText();
    _o.valueText = this.valueText();
    _o.percentText = this.percentText();
    _o.limitQuote = this.limitQuote() !== null ? this.limitQuote()!.unpack() : null;
    _o.minQuote = this.minQuote() !== null ? this.minQuote()!.unpack() : null;
    _o.maxQuote = this.maxQuote() !== null ? this.maxQuote()!.unpack() : null;
    _o.boundQuote = this.boundQuote() !== null ? this.boundQuote()!.unpack() : null;
    _o.isEnabled = this.isEnabled();
  }
}

export class DealLimitT implements flatbuffers.IGeneratedObject {
  constructor(
    public typeText: string | Uint8Array | null = null,
    public valueText: string | Uint8Array | null = null,
    public percentText: string | Uint8Array | null = null,
    public limitQuote: QuoteT | null = null,
    public minQuote: QuoteT | null = null,
    public maxQuote: QuoteT | null = null,
    public boundQuote: QuoteT | null = null,
    public isEnabled: boolean = false,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const typeText = this.typeText !== null ? builder.createString(this.typeText) : 0;
    const valueText = this.valueText !== null ? builder.createString(this.valueText) : 0;
    const percentText = this.percentText !== null ? builder.createString(this.percentText) : 0;

    DealLimit.startDealLimit(builder);
    DealLimit.addTypeText(builder, typeText);
    DealLimit.addValueText(builder, valueText);
    DealLimit.addPercentText(builder, percentText);
    DealLimit.addLimitQuote(builder, this.limitQuote !== null ? this.limitQuote.pack(builder) : 0);
    DealLimit.addMinQuote(builder, this.minQuote !== null ? this.minQuote.pack(builder) : 0);
    DealLimit.addMaxQuote(builder, this.maxQuote !== null ? this.maxQuote.pack(builder) : 0);
    DealLimit.addBoundQuote(builder, this.boundQuote !== null ? this.boundQuote.pack(builder) : 0);
    DealLimit.addIsEnabled(builder, this.isEnabled);

    return DealLimit.endDealLimit(builder);
  }
}
