// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class StrikeId implements flatbuffers.IUnpackableObject<StrikeIdT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): StrikeId {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsStrikeId(bb: flatbuffers.ByteBuffer, obj?: StrikeId): StrikeId {
    return (obj || new StrikeId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsStrikeId(bb: flatbuffers.ByteBuffer, obj?: StrikeId): StrikeId {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new StrikeId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  id(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  static startStrikeId(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addId(builder: flatbuffers.Builder, id: number) {
    builder.addFieldInt32(0, id, 0);
  }

  static endStrikeId(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createStrikeId(builder: flatbuffers.Builder, id: number): flatbuffers.Offset {
    StrikeId.startStrikeId(builder);
    StrikeId.addId(builder, id);
    return StrikeId.endStrikeId(builder);
  }

  unpack(): StrikeIdT {
    return new StrikeIdT(this.id());
  }

  unpackTo(_o: StrikeIdT): void {
    _o.id = this.id();
  }
}

export class StrikeIdT implements flatbuffers.IGeneratedObject {
  constructor(public id: number = 0) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return StrikeId.createStrikeId(builder, this.id);
  }
}
