// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class StartOnboarding implements flatbuffers.IUnpackableObject<StartOnboardingT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): StartOnboarding {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsStartOnboarding(bb: flatbuffers.ByteBuffer, obj?: StartOnboarding): StartOnboarding {
    return (obj || new StartOnboarding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsStartOnboarding(bb: flatbuffers.ByteBuffer, obj?: StartOnboarding): StartOnboarding {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new StartOnboarding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static startStartOnboarding(builder: flatbuffers.Builder) {
    builder.startObject(0);
  }

  static endStartOnboarding(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createStartOnboarding(builder: flatbuffers.Builder): flatbuffers.Offset {
    StartOnboarding.startStartOnboarding(builder);
    return StartOnboarding.endStartOnboarding(builder);
  }

  unpack(): StartOnboardingT {
    return new StartOnboardingT();
  }

  unpackTo(_o: StartOnboardingT): void {}
}

export class StartOnboardingT implements flatbuffers.IGeneratedObject {
  constructor() {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return StartOnboarding.createStartOnboarding(builder);
  }
}
