// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class SetAreaChartZoomLimits implements flatbuffers.IUnpackableObject<SetAreaChartZoomLimitsT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): SetAreaChartZoomLimits {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsSetAreaChartZoomLimits(
    bb: flatbuffers.ByteBuffer,
    obj?: SetAreaChartZoomLimits,
  ): SetAreaChartZoomLimits {
    return (obj || new SetAreaChartZoomLimits()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsSetAreaChartZoomLimits(
    bb: flatbuffers.ByteBuffer,
    obj?: SetAreaChartZoomLimits,
  ): SetAreaChartZoomLimits {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new SetAreaChartZoomLimits()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  minTimeInterval(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  maxTimeInterval(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  static startSetAreaChartZoomLimits(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addMinTimeInterval(builder: flatbuffers.Builder, minTimeInterval: number) {
    builder.addFieldInt32(0, minTimeInterval, 0);
  }

  static addMaxTimeInterval(builder: flatbuffers.Builder, maxTimeInterval: number) {
    builder.addFieldInt32(1, maxTimeInterval, 0);
  }

  static endSetAreaChartZoomLimits(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createSetAreaChartZoomLimits(
    builder: flatbuffers.Builder,
    minTimeInterval: number,
    maxTimeInterval: number,
  ): flatbuffers.Offset {
    SetAreaChartZoomLimits.startSetAreaChartZoomLimits(builder);
    SetAreaChartZoomLimits.addMinTimeInterval(builder, minTimeInterval);
    SetAreaChartZoomLimits.addMaxTimeInterval(builder, maxTimeInterval);
    return SetAreaChartZoomLimits.endSetAreaChartZoomLimits(builder);
  }

  unpack(): SetAreaChartZoomLimitsT {
    return new SetAreaChartZoomLimitsT(this.minTimeInterval(), this.maxTimeInterval());
  }

  unpackTo(_o: SetAreaChartZoomLimitsT): void {
    _o.minTimeInterval = this.minTimeInterval();
    _o.maxTimeInterval = this.maxTimeInterval();
  }
}

export class SetAreaChartZoomLimitsT implements flatbuffers.IGeneratedObject {
  constructor(public minTimeInterval: number = 0, public maxTimeInterval: number = 0) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return SetAreaChartZoomLimits.createSetAreaChartZoomLimits(builder, this.minTimeInterval, this.maxTimeInterval);
  }
}
