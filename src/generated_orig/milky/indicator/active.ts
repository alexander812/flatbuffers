// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Active implements flatbuffers.IUnpackableObject<ActiveT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Active {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsActive(bb: flatbuffers.ByteBuffer, obj?: Active): Active {
    return (obj || new Active()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsActive(bb: flatbuffers.ByteBuffer, obj?: Active): Active {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Active()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  value(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  static startActive(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addValue(builder: flatbuffers.Builder, value: boolean) {
    builder.addFieldInt8(0, +value, +false);
  }

  static endActive(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createActive(builder: flatbuffers.Builder, value: boolean): flatbuffers.Offset {
    Active.startActive(builder);
    Active.addValue(builder, value);
    return Active.endActive(builder);
  }

  unpack(): ActiveT {
    return new ActiveT(this.value());
  }

  unpackTo(_o: ActiveT): void {
    _o.value = this.value();
  }
}

export class ActiveT implements flatbuffers.IGeneratedObject {
  constructor(public value: boolean = false) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return Active.createActive(builder, this.value);
  }
}
