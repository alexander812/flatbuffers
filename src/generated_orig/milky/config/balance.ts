// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Balance implements flatbuffers.IUnpackableObject<BalanceT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Balance {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsBalance(bb: flatbuffers.ByteBuffer, obj?: Balance): Balance {
    return (obj || new Balance()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsBalance(bb: flatbuffers.ByteBuffer, obj?: Balance): Balance {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Balance()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  balance(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
  }

  static startBalance(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addBalance(builder: flatbuffers.Builder, balance: number) {
    builder.addFieldFloat64(0, balance, 0.0);
  }

  static endBalance(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createBalance(builder: flatbuffers.Builder, balance: number): flatbuffers.Offset {
    Balance.startBalance(builder);
    Balance.addBalance(builder, balance);
    return Balance.endBalance(builder);
  }

  unpack(): BalanceT {
    return new BalanceT(this.balance());
  }

  unpackTo(_o: BalanceT): void {
    _o.balance = this.balance();
  }
}

export class BalanceT implements flatbuffers.IGeneratedObject {
  constructor(public balance: number = 0.0) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return Balance.createBalance(builder, this.balance);
  }
}
