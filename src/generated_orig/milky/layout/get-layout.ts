// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class GetLayout implements flatbuffers.IUnpackableObject<GetLayoutT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): GetLayout {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsGetLayout(bb: flatbuffers.ByteBuffer, obj?: GetLayout): GetLayout {
    return (obj || new GetLayout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsGetLayout(bb: flatbuffers.ByteBuffer, obj?: GetLayout): GetLayout {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new GetLayout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static startGetLayout(builder: flatbuffers.Builder) {
    builder.startObject(0);
  }

  static endGetLayout(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createGetLayout(builder: flatbuffers.Builder): flatbuffers.Offset {
    GetLayout.startGetLayout(builder);
    return GetLayout.endGetLayout(builder);
  }

  unpack(): GetLayoutT {
    return new GetLayoutT();
  }

  unpackTo(_o: GetLayoutT): void {}
}

export class GetLayoutT implements flatbuffers.IGeneratedObject {
  constructor() {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return GetLayout.createGetLayout(builder);
  }
}
