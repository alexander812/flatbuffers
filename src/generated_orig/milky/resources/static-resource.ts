// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { StaticResourceType } from '../../milky/resources/static-resource-type.js';

export class StaticResource implements flatbuffers.IUnpackableObject<StaticResourceT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): StaticResource {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsStaticResource(bb: flatbuffers.ByteBuffer, obj?: StaticResource): StaticResource {
    return (obj || new StaticResource()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsStaticResource(bb: flatbuffers.ByteBuffer, obj?: StaticResource): StaticResource {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new StaticResource()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  id(): StaticResourceType {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : StaticResourceType.Undefined;
  }

  static startStaticResource(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addId(builder: flatbuffers.Builder, id: StaticResourceType) {
    builder.addFieldInt32(0, id, StaticResourceType.Undefined);
  }

  static endStaticResource(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createStaticResource(builder: flatbuffers.Builder, id: StaticResourceType): flatbuffers.Offset {
    StaticResource.startStaticResource(builder);
    StaticResource.addId(builder, id);
    return StaticResource.endStaticResource(builder);
  }

  unpack(): StaticResourceT {
    return new StaticResourceT(this.id());
  }

  unpackTo(_o: StaticResourceT): void {
    _o.id = this.id();
  }
}

export class StaticResourceT implements flatbuffers.IGeneratedObject {
  constructor(public id: StaticResourceType = StaticResourceType.Undefined) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return StaticResource.createStaticResource(builder, this.id);
  }
}
