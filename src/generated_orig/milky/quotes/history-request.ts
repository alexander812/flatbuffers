// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { TimeT } from '../../milky/model/time.js';
import { Time } from '../../milky/model/time.js';
import { HistoryRequestDirectrion } from '../../milky/quotes/history-request-directrion.js';

export class HistoryRequest implements flatbuffers.IUnpackableObject<HistoryRequestT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): HistoryRequest {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsHistoryRequest(bb: flatbuffers.ByteBuffer, obj?: HistoryRequest): HistoryRequest {
    return (obj || new HistoryRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsHistoryRequest(bb: flatbuffers.ByteBuffer, obj?: HistoryRequest): HistoryRequest {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new HistoryRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  directrion(): HistoryRequestDirectrion {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : HistoryRequestDirectrion.Forward;
  }

  timestamp(obj?: Time): Time | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  count(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  static startHistoryRequest(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addDirectrion(builder: flatbuffers.Builder, directrion: HistoryRequestDirectrion) {
    builder.addFieldInt8(0, directrion, HistoryRequestDirectrion.Forward);
  }

  static addTimestamp(builder: flatbuffers.Builder, timestampOffset: flatbuffers.Offset) {
    builder.addFieldStruct(1, timestampOffset, 0);
  }

  static addCount(builder: flatbuffers.Builder, count: number) {
    builder.addFieldInt32(2, count, 0);
  }

  static endHistoryRequest(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  unpack(): HistoryRequestT {
    return new HistoryRequestT(
      this.directrion(),
      this.timestamp() !== null ? this.timestamp()!.unpack() : null,
      this.count(),
    );
  }

  unpackTo(_o: HistoryRequestT): void {
    _o.directrion = this.directrion();
    _o.timestamp = this.timestamp() !== null ? this.timestamp()!.unpack() : null;
    _o.count = this.count();
  }
}

export class HistoryRequestT implements flatbuffers.IGeneratedObject {
  constructor(
    public directrion: HistoryRequestDirectrion = HistoryRequestDirectrion.Forward,
    public timestamp: TimeT | null = null,
    public count: number = 0,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    HistoryRequest.startHistoryRequest(builder);
    HistoryRequest.addDirectrion(builder, this.directrion);
    HistoryRequest.addTimestamp(builder, this.timestamp !== null ? this.timestamp.pack(builder) : 0);
    HistoryRequest.addCount(builder, this.count);

    return HistoryRequest.endHistoryRequest(builder);
  }
}
