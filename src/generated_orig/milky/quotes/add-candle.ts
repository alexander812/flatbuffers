// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { CandleT } from '../../milky/model/quotes/candle.js';
import { Candle } from '../../milky/model/quotes/candle.js';

export class AddCandle implements flatbuffers.IUnpackableObject<AddCandleT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): AddCandle {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsAddCandle(bb: flatbuffers.ByteBuffer, obj?: AddCandle): AddCandle {
    return (obj || new AddCandle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsAddCandle(bb: flatbuffers.ByteBuffer, obj?: AddCandle): AddCandle {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new AddCandle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  candle(obj?: Candle): Candle | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? (obj || new Candle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  static startAddCandle(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addCandle(builder: flatbuffers.Builder, candleOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, candleOffset, 0);
  }

  static endAddCandle(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // candle
    return offset;
  }

  static createAddCandle(builder: flatbuffers.Builder, candleOffset: flatbuffers.Offset): flatbuffers.Offset {
    AddCandle.startAddCandle(builder);
    AddCandle.addCandle(builder, candleOffset);
    return AddCandle.endAddCandle(builder);
  }

  unpack(): AddCandleT {
    return new AddCandleT(this.candle() !== null ? this.candle()!.unpack() : null);
  }

  unpackTo(_o: AddCandleT): void {
    _o.candle = this.candle() !== null ? this.candle()!.unpack() : null;
  }
}

export class AddCandleT implements flatbuffers.IGeneratedObject {
  constructor(public candle: CandleT | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const candle = this.candle !== null ? this.candle.pack(builder) : 0;

    return AddCandle.createAddCandle(builder, candle);
  }
}
