// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import type { QuoteT } from '../../milky/model/quote.js';
import { Quote } from '../../milky/model/quote.js';

export class SetAsk implements flatbuffers.IUnpackableObject<SetAskT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): SetAsk {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsSetAsk(bb: flatbuffers.ByteBuffer, obj?: SetAsk): SetAsk {
    return (obj || new SetAsk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsSetAsk(bb: flatbuffers.ByteBuffer, obj?: SetAsk): SetAsk {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new SetAsk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  quote(obj?: Quote): Quote | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  static startSetAsk(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addQuote(builder: flatbuffers.Builder, quoteOffset: flatbuffers.Offset) {
    builder.addFieldStruct(0, quoteOffset, 0);
  }

  static endSetAsk(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // quote
    return offset;
  }

  static createSetAsk(builder: flatbuffers.Builder, quoteOffset: flatbuffers.Offset): flatbuffers.Offset {
    SetAsk.startSetAsk(builder);
    SetAsk.addQuote(builder, quoteOffset);
    return SetAsk.endSetAsk(builder);
  }

  unpack(): SetAskT {
    return new SetAskT(this.quote() !== null ? this.quote()!.unpack() : null);
  }

  unpackTo(_o: SetAskT): void {
    _o.quote = this.quote() !== null ? this.quote()!.unpack() : null;
  }
}

export class SetAskT implements flatbuffers.IGeneratedObject {
  constructor(public quote: QuoteT | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return SetAsk.createSetAsk(builder, this.quote !== null ? this.quote.pack(builder) : 0);
  }
}
