// automatically generated by the FlatBuffers compiler, do not modify

import type * as flatbuffers from 'flatbuffers';

export class Point implements flatbuffers.IUnpackableObject<PointT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Point {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  time(): number {
    return this.bb!.readFloat64(this.bb_pos);
  }

  quote(): number {
    return this.bb!.readFloat64(this.bb_pos + 8);
  }

  static sizeOf(): number {
    return 16;
  }

  static createPoint(builder: flatbuffers.Builder, time: number, quote: number): flatbuffers.Offset {
    builder.prep(8, 16);
    builder.writeFloat64(quote);
    builder.writeFloat64(time);
    return builder.offset();
  }

  unpack(): PointT {
    return new PointT(this.time(), this.quote());
  }

  unpackTo(_o: PointT): void {
    _o.time = this.time();
    _o.quote = this.quote();
  }
}

export class PointT implements flatbuffers.IGeneratedObject {
  constructor(public time: number = 0.0, public quote: number = 0.0) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return Point.createPoint(builder, this.time, this.quote);
  }
}
