// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ErrorCode } from '../../milky/common/error-code.js';

export class Error implements flatbuffers.IUnpackableObject<ErrorT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Error {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsError(bb: flatbuffers.ByteBuffer, obj?: Error): Error {
    return (obj || new Error()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsError(bb: flatbuffers.ByteBuffer, obj?: Error): Error {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Error()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  description(): string | null;
  description(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  description(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  code(): ErrorCode {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : ErrorCode.UnknownError;
  }

  static startError(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addDescription(builder: flatbuffers.Builder, descriptionOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, descriptionOffset, 0);
  }

  static addCode(builder: flatbuffers.Builder, code: ErrorCode) {
    builder.addFieldInt32(1, code, ErrorCode.UnknownError);
  }

  static endError(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createError(
    builder: flatbuffers.Builder,
    descriptionOffset: flatbuffers.Offset,
    code: ErrorCode,
  ): flatbuffers.Offset {
    Error.startError(builder);
    Error.addDescription(builder, descriptionOffset);
    Error.addCode(builder, code);
    return Error.endError(builder);
  }

  unpack(): ErrorT {
    return new ErrorT(this.description(), this.code());
  }

  unpackTo(_o: ErrorT): void {
    _o.description = this.description();
    _o.code = this.code();
  }
}

export class ErrorT implements flatbuffers.IGeneratedObject {
  constructor(public description: string | Uint8Array | null = null, public code: ErrorCode = ErrorCode.UnknownError) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const description = this.description !== null ? builder.createString(this.description) : 0;

    return Error.createError(builder, description, this.code);
  }
}
