// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ReloadFonts implements flatbuffers.IUnpackableObject<ReloadFontsT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ReloadFonts {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsReloadFonts(bb: flatbuffers.ByteBuffer, obj?: ReloadFonts): ReloadFonts {
    return (obj || new ReloadFonts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsReloadFonts(bb: flatbuffers.ByteBuffer, obj?: ReloadFonts): ReloadFonts {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ReloadFonts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static startReloadFonts(builder: flatbuffers.Builder) {
    builder.startObject(0);
  }

  static endReloadFonts(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createReloadFonts(builder: flatbuffers.Builder): flatbuffers.Offset {
    ReloadFonts.startReloadFonts(builder);
    return ReloadFonts.endReloadFonts(builder);
  }

  unpack(): ReloadFontsT {
    return new ReloadFontsT();
  }

  unpackTo(_o: ReloadFontsT): void {}
}

export class ReloadFontsT implements flatbuffers.IGeneratedObject {
  constructor() {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return ReloadFonts.createReloadFonts(builder);
  }
}
