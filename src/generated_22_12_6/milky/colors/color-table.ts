// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ColorTable implements flatbuffers.IUnpackableObject<ColorTableT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ColorTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsColorTable(bb:flatbuffers.ByteBuffer, obj?:ColorTable):ColorTable {
  return (obj || new ColorTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsColorTable(bb:flatbuffers.ByteBuffer, obj?:ColorTable):ColorTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ColorTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

accentAlpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

accentBeta():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

accentGamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

backgroundAlpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

backgroundBeta():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

backgroundGamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

baseAlpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

baseBeta():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

baseGamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

contrastAlpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

contrastBeta():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

contrastGamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

highAlpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

highBeta():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

highGamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

negativeAlpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

negativeBeta():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

negativeGamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

positiveAlpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

positiveBeta():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

positiveGamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

warningAlpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

warningBeta():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

warningGamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

buttonContrastAlpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

buttonContrastGamma():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

curveLine():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

curveGradient():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

gridLines():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

borders():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

indicator1():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

indicator2():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

indicator3():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

indicator4():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

indicator5():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

indicator6():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

indicator7():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

indicator8():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

indicator9():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 16843009;
}

static startColorTable(builder:flatbuffers.Builder) {
  builder.startObject(39);
}

static addAccentAlpha(builder:flatbuffers.Builder, accentAlpha:number) {
  builder.addFieldInt32(0, accentAlpha, 16843009);
}

static addAccentBeta(builder:flatbuffers.Builder, accentBeta:number) {
  builder.addFieldInt32(1, accentBeta, 16843009);
}

static addAccentGamma(builder:flatbuffers.Builder, accentGamma:number) {
  builder.addFieldInt32(2, accentGamma, 16843009);
}

static addBackgroundAlpha(builder:flatbuffers.Builder, backgroundAlpha:number) {
  builder.addFieldInt32(3, backgroundAlpha, 16843009);
}

static addBackgroundBeta(builder:flatbuffers.Builder, backgroundBeta:number) {
  builder.addFieldInt32(4, backgroundBeta, 16843009);
}

static addBackgroundGamma(builder:flatbuffers.Builder, backgroundGamma:number) {
  builder.addFieldInt32(5, backgroundGamma, 16843009);
}

static addBaseAlpha(builder:flatbuffers.Builder, baseAlpha:number) {
  builder.addFieldInt32(6, baseAlpha, 16843009);
}

static addBaseBeta(builder:flatbuffers.Builder, baseBeta:number) {
  builder.addFieldInt32(7, baseBeta, 16843009);
}

static addBaseGamma(builder:flatbuffers.Builder, baseGamma:number) {
  builder.addFieldInt32(8, baseGamma, 16843009);
}

static addContrastAlpha(builder:flatbuffers.Builder, contrastAlpha:number) {
  builder.addFieldInt32(9, contrastAlpha, 16843009);
}

static addContrastBeta(builder:flatbuffers.Builder, contrastBeta:number) {
  builder.addFieldInt32(10, contrastBeta, 16843009);
}

static addContrastGamma(builder:flatbuffers.Builder, contrastGamma:number) {
  builder.addFieldInt32(11, contrastGamma, 16843009);
}

static addHighAlpha(builder:flatbuffers.Builder, highAlpha:number) {
  builder.addFieldInt32(12, highAlpha, 16843009);
}

static addHighBeta(builder:flatbuffers.Builder, highBeta:number) {
  builder.addFieldInt32(13, highBeta, 16843009);
}

static addHighGamma(builder:flatbuffers.Builder, highGamma:number) {
  builder.addFieldInt32(14, highGamma, 16843009);
}

static addNegativeAlpha(builder:flatbuffers.Builder, negativeAlpha:number) {
  builder.addFieldInt32(15, negativeAlpha, 16843009);
}

static addNegativeBeta(builder:flatbuffers.Builder, negativeBeta:number) {
  builder.addFieldInt32(16, negativeBeta, 16843009);
}

static addNegativeGamma(builder:flatbuffers.Builder, negativeGamma:number) {
  builder.addFieldInt32(17, negativeGamma, 16843009);
}

static addPositiveAlpha(builder:flatbuffers.Builder, positiveAlpha:number) {
  builder.addFieldInt32(18, positiveAlpha, 16843009);
}

static addPositiveBeta(builder:flatbuffers.Builder, positiveBeta:number) {
  builder.addFieldInt32(19, positiveBeta, 16843009);
}

static addPositiveGamma(builder:flatbuffers.Builder, positiveGamma:number) {
  builder.addFieldInt32(20, positiveGamma, 16843009);
}

static addWarningAlpha(builder:flatbuffers.Builder, warningAlpha:number) {
  builder.addFieldInt32(21, warningAlpha, 16843009);
}

static addWarningBeta(builder:flatbuffers.Builder, warningBeta:number) {
  builder.addFieldInt32(22, warningBeta, 16843009);
}

static addWarningGamma(builder:flatbuffers.Builder, warningGamma:number) {
  builder.addFieldInt32(23, warningGamma, 16843009);
}

static addButtonContrastAlpha(builder:flatbuffers.Builder, buttonContrastAlpha:number) {
  builder.addFieldInt32(24, buttonContrastAlpha, 16843009);
}

static addButtonContrastGamma(builder:flatbuffers.Builder, buttonContrastGamma:number) {
  builder.addFieldInt32(25, buttonContrastGamma, 16843009);
}

static addCurveLine(builder:flatbuffers.Builder, curveLine:number) {
  builder.addFieldInt32(26, curveLine, 16843009);
}

static addCurveGradient(builder:flatbuffers.Builder, curveGradient:number) {
  builder.addFieldInt32(27, curveGradient, 16843009);
}

static addGridLines(builder:flatbuffers.Builder, gridLines:number) {
  builder.addFieldInt32(28, gridLines, 16843009);
}

static addBorders(builder:flatbuffers.Builder, borders:number) {
  builder.addFieldInt32(29, borders, 16843009);
}

static addIndicator1(builder:flatbuffers.Builder, indicator1:number) {
  builder.addFieldInt32(30, indicator1, 16843009);
}

static addIndicator2(builder:flatbuffers.Builder, indicator2:number) {
  builder.addFieldInt32(31, indicator2, 16843009);
}

static addIndicator3(builder:flatbuffers.Builder, indicator3:number) {
  builder.addFieldInt32(32, indicator3, 16843009);
}

static addIndicator4(builder:flatbuffers.Builder, indicator4:number) {
  builder.addFieldInt32(33, indicator4, 16843009);
}

static addIndicator5(builder:flatbuffers.Builder, indicator5:number) {
  builder.addFieldInt32(34, indicator5, 16843009);
}

static addIndicator6(builder:flatbuffers.Builder, indicator6:number) {
  builder.addFieldInt32(35, indicator6, 16843009);
}

static addIndicator7(builder:flatbuffers.Builder, indicator7:number) {
  builder.addFieldInt32(36, indicator7, 16843009);
}

static addIndicator8(builder:flatbuffers.Builder, indicator8:number) {
  builder.addFieldInt32(37, indicator8, 16843009);
}

static addIndicator9(builder:flatbuffers.Builder, indicator9:number) {
  builder.addFieldInt32(38, indicator9, 16843009);
}

static endColorTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createColorTable(builder:flatbuffers.Builder, accentAlpha:number, accentBeta:number, accentGamma:number, backgroundAlpha:number, backgroundBeta:number, backgroundGamma:number, baseAlpha:number, baseBeta:number, baseGamma:number, contrastAlpha:number, contrastBeta:number, contrastGamma:number, highAlpha:number, highBeta:number, highGamma:number, negativeAlpha:number, negativeBeta:number, negativeGamma:number, positiveAlpha:number, positiveBeta:number, positiveGamma:number, warningAlpha:number, warningBeta:number, warningGamma:number, buttonContrastAlpha:number, buttonContrastGamma:number, curveLine:number, curveGradient:number, gridLines:number, borders:number, indicator1:number, indicator2:number, indicator3:number, indicator4:number, indicator5:number, indicator6:number, indicator7:number, indicator8:number, indicator9:number):flatbuffers.Offset {
  ColorTable.startColorTable(builder);
  ColorTable.addAccentAlpha(builder, accentAlpha);
  ColorTable.addAccentBeta(builder, accentBeta);
  ColorTable.addAccentGamma(builder, accentGamma);
  ColorTable.addBackgroundAlpha(builder, backgroundAlpha);
  ColorTable.addBackgroundBeta(builder, backgroundBeta);
  ColorTable.addBackgroundGamma(builder, backgroundGamma);
  ColorTable.addBaseAlpha(builder, baseAlpha);
  ColorTable.addBaseBeta(builder, baseBeta);
  ColorTable.addBaseGamma(builder, baseGamma);
  ColorTable.addContrastAlpha(builder, contrastAlpha);
  ColorTable.addContrastBeta(builder, contrastBeta);
  ColorTable.addContrastGamma(builder, contrastGamma);
  ColorTable.addHighAlpha(builder, highAlpha);
  ColorTable.addHighBeta(builder, highBeta);
  ColorTable.addHighGamma(builder, highGamma);
  ColorTable.addNegativeAlpha(builder, negativeAlpha);
  ColorTable.addNegativeBeta(builder, negativeBeta);
  ColorTable.addNegativeGamma(builder, negativeGamma);
  ColorTable.addPositiveAlpha(builder, positiveAlpha);
  ColorTable.addPositiveBeta(builder, positiveBeta);
  ColorTable.addPositiveGamma(builder, positiveGamma);
  ColorTable.addWarningAlpha(builder, warningAlpha);
  ColorTable.addWarningBeta(builder, warningBeta);
  ColorTable.addWarningGamma(builder, warningGamma);
  ColorTable.addButtonContrastAlpha(builder, buttonContrastAlpha);
  ColorTable.addButtonContrastGamma(builder, buttonContrastGamma);
  ColorTable.addCurveLine(builder, curveLine);
  ColorTable.addCurveGradient(builder, curveGradient);
  ColorTable.addGridLines(builder, gridLines);
  ColorTable.addBorders(builder, borders);
  ColorTable.addIndicator1(builder, indicator1);
  ColorTable.addIndicator2(builder, indicator2);
  ColorTable.addIndicator3(builder, indicator3);
  ColorTable.addIndicator4(builder, indicator4);
  ColorTable.addIndicator5(builder, indicator5);
  ColorTable.addIndicator6(builder, indicator6);
  ColorTable.addIndicator7(builder, indicator7);
  ColorTable.addIndicator8(builder, indicator8);
  ColorTable.addIndicator9(builder, indicator9);
  return ColorTable.endColorTable(builder);
}

unpack(): ColorTableT {
  return new ColorTableT(
    this.accentAlpha(),
    this.accentBeta(),
    this.accentGamma(),
    this.backgroundAlpha(),
    this.backgroundBeta(),
    this.backgroundGamma(),
    this.baseAlpha(),
    this.baseBeta(),
    this.baseGamma(),
    this.contrastAlpha(),
    this.contrastBeta(),
    this.contrastGamma(),
    this.highAlpha(),
    this.highBeta(),
    this.highGamma(),
    this.negativeAlpha(),
    this.negativeBeta(),
    this.negativeGamma(),
    this.positiveAlpha(),
    this.positiveBeta(),
    this.positiveGamma(),
    this.warningAlpha(),
    this.warningBeta(),
    this.warningGamma(),
    this.buttonContrastAlpha(),
    this.buttonContrastGamma(),
    this.curveLine(),
    this.curveGradient(),
    this.gridLines(),
    this.borders(),
    this.indicator1(),
    this.indicator2(),
    this.indicator3(),
    this.indicator4(),
    this.indicator5(),
    this.indicator6(),
    this.indicator7(),
    this.indicator8(),
    this.indicator9()
  );
}


unpackTo(_o: ColorTableT): void {
  _o.accentAlpha = this.accentAlpha();
  _o.accentBeta = this.accentBeta();
  _o.accentGamma = this.accentGamma();
  _o.backgroundAlpha = this.backgroundAlpha();
  _o.backgroundBeta = this.backgroundBeta();
  _o.backgroundGamma = this.backgroundGamma();
  _o.baseAlpha = this.baseAlpha();
  _o.baseBeta = this.baseBeta();
  _o.baseGamma = this.baseGamma();
  _o.contrastAlpha = this.contrastAlpha();
  _o.contrastBeta = this.contrastBeta();
  _o.contrastGamma = this.contrastGamma();
  _o.highAlpha = this.highAlpha();
  _o.highBeta = this.highBeta();
  _o.highGamma = this.highGamma();
  _o.negativeAlpha = this.negativeAlpha();
  _o.negativeBeta = this.negativeBeta();
  _o.negativeGamma = this.negativeGamma();
  _o.positiveAlpha = this.positiveAlpha();
  _o.positiveBeta = this.positiveBeta();
  _o.positiveGamma = this.positiveGamma();
  _o.warningAlpha = this.warningAlpha();
  _o.warningBeta = this.warningBeta();
  _o.warningGamma = this.warningGamma();
  _o.buttonContrastAlpha = this.buttonContrastAlpha();
  _o.buttonContrastGamma = this.buttonContrastGamma();
  _o.curveLine = this.curveLine();
  _o.curveGradient = this.curveGradient();
  _o.gridLines = this.gridLines();
  _o.borders = this.borders();
  _o.indicator1 = this.indicator1();
  _o.indicator2 = this.indicator2();
  _o.indicator3 = this.indicator3();
  _o.indicator4 = this.indicator4();
  _o.indicator5 = this.indicator5();
  _o.indicator6 = this.indicator6();
  _o.indicator7 = this.indicator7();
  _o.indicator8 = this.indicator8();
  _o.indicator9 = this.indicator9();
}
}

export class ColorTableT implements flatbuffers.IGeneratedObject {
constructor(
  public accentAlpha: number = 16843009,
  public accentBeta: number = 16843009,
  public accentGamma: number = 16843009,
  public backgroundAlpha: number = 16843009,
  public backgroundBeta: number = 16843009,
  public backgroundGamma: number = 16843009,
  public baseAlpha: number = 16843009,
  public baseBeta: number = 16843009,
  public baseGamma: number = 16843009,
  public contrastAlpha: number = 16843009,
  public contrastBeta: number = 16843009,
  public contrastGamma: number = 16843009,
  public highAlpha: number = 16843009,
  public highBeta: number = 16843009,
  public highGamma: number = 16843009,
  public negativeAlpha: number = 16843009,
  public negativeBeta: number = 16843009,
  public negativeGamma: number = 16843009,
  public positiveAlpha: number = 16843009,
  public positiveBeta: number = 16843009,
  public positiveGamma: number = 16843009,
  public warningAlpha: number = 16843009,
  public warningBeta: number = 16843009,
  public warningGamma: number = 16843009,
  public buttonContrastAlpha: number = 16843009,
  public buttonContrastGamma: number = 16843009,
  public curveLine: number = 16843009,
  public curveGradient: number = 16843009,
  public gridLines: number = 16843009,
  public borders: number = 16843009,
  public indicator1: number = 16843009,
  public indicator2: number = 16843009,
  public indicator3: number = 16843009,
  public indicator4: number = 16843009,
  public indicator5: number = 16843009,
  public indicator6: number = 16843009,
  public indicator7: number = 16843009,
  public indicator8: number = 16843009,
  public indicator9: number = 16843009
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ColorTable.createColorTable(builder,
    this.accentAlpha,
    this.accentBeta,
    this.accentGamma,
    this.backgroundAlpha,
    this.backgroundBeta,
    this.backgroundGamma,
    this.baseAlpha,
    this.baseBeta,
    this.baseGamma,
    this.contrastAlpha,
    this.contrastBeta,
    this.contrastGamma,
    this.highAlpha,
    this.highBeta,
    this.highGamma,
    this.negativeAlpha,
    this.negativeBeta,
    this.negativeGamma,
    this.positiveAlpha,
    this.positiveBeta,
    this.positiveGamma,
    this.warningAlpha,
    this.warningBeta,
    this.warningGamma,
    this.buttonContrastAlpha,
    this.buttonContrastGamma,
    this.curveLine,
    this.curveGradient,
    this.gridLines,
    this.borders,
    this.indicator1,
    this.indicator2,
    this.indicator3,
    this.indicator4,
    this.indicator5,
    this.indicator6,
    this.indicator7,
    this.indicator8,
    this.indicator9
  );
}
}
