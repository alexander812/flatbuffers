// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Ok, OkT } from '../../milky/common/ok.js';
import { DealsReplys, unionToDealsReplys, unionListToDealsReplys } from '../../milky/deals/deals-replys.js';
import { Error, ErrorT } from '../../milky/deals/error.js';


export class Reply implements flatbuffers.IUnpackableObject<ReplyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Reply {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReply(bb:flatbuffers.ByteBuffer, obj?:Reply):Reply {
  return (obj || new Reply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReply(bb:flatbuffers.ByteBuffer, obj?:Reply):Reply {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Reply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

replyType():DealsReplys {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : DealsReplys.NONE;
}

reply<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startReply(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addReplyType(builder:flatbuffers.Builder, replyType:DealsReplys) {
  builder.addFieldInt8(0, replyType, DealsReplys.NONE);
}

static addReply(builder:flatbuffers.Builder, replyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, replyOffset, 0);
}

static endReply(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReply(builder:flatbuffers.Builder, replyType:DealsReplys, replyOffset:flatbuffers.Offset):flatbuffers.Offset {
  Reply.startReply(builder);
  Reply.addReplyType(builder, replyType);
  Reply.addReply(builder, replyOffset);
  return Reply.endReply(builder);
}

unpack(): ReplyT {
  return new ReplyT(
    this.replyType(),
    (() => {
      const temp = unionToDealsReplys(this.replyType(), this.reply.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: ReplyT): void {
  _o.replyType = this.replyType();
  _o.reply = (() => {
      const temp = unionToDealsReplys(this.replyType(), this.reply.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class ReplyT implements flatbuffers.IGeneratedObject {
constructor(
  public replyType: DealsReplys = DealsReplys.NONE,
  public reply: ErrorT|OkT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const reply = builder.createObjectOffset(this.reply);

  return Reply.createReply(builder,
    this.replyType,
    reply
  );
}
}
