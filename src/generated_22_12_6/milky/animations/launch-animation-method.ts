// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Animations, unionToAnimations, unionListToAnimations } from '../../milky/animations/animations.js';
import { LabelAnimation, LabelAnimationT } from '../../milky/animations/label-animation.js';
import { SplashAnimation, SplashAnimationT } from '../../milky/animations/splash-animation.js';


export class LaunchAnimationMethod implements flatbuffers.IUnpackableObject<LaunchAnimationMethodT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LaunchAnimationMethod {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLaunchAnimationMethod(bb:flatbuffers.ByteBuffer, obj?:LaunchAnimationMethod):LaunchAnimationMethod {
  return (obj || new LaunchAnimationMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLaunchAnimationMethod(bb:flatbuffers.ByteBuffer, obj?:LaunchAnimationMethod):LaunchAnimationMethod {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LaunchAnimationMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

animationModelType():Animations {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Animations.NONE;
}

animationModel<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startLaunchAnimationMethod(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAnimationModelType(builder:flatbuffers.Builder, animationModelType:Animations) {
  builder.addFieldInt8(0, animationModelType, Animations.NONE);
}

static addAnimationModel(builder:flatbuffers.Builder, animationModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, animationModelOffset, 0);
}

static endLaunchAnimationMethod(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLaunchAnimationMethod(builder:flatbuffers.Builder, animationModelType:Animations, animationModelOffset:flatbuffers.Offset):flatbuffers.Offset {
  LaunchAnimationMethod.startLaunchAnimationMethod(builder);
  LaunchAnimationMethod.addAnimationModelType(builder, animationModelType);
  LaunchAnimationMethod.addAnimationModel(builder, animationModelOffset);
  return LaunchAnimationMethod.endLaunchAnimationMethod(builder);
}

unpack(): LaunchAnimationMethodT {
  return new LaunchAnimationMethodT(
    this.animationModelType(),
    (() => {
      const temp = unionToAnimations(this.animationModelType(), this.animationModel.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: LaunchAnimationMethodT): void {
  _o.animationModelType = this.animationModelType();
  _o.animationModel = (() => {
      const temp = unionToAnimations(this.animationModelType(), this.animationModel.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class LaunchAnimationMethodT implements flatbuffers.IGeneratedObject {
constructor(
  public animationModelType: Animations = Animations.NONE,
  public animationModel: LabelAnimationT|SplashAnimationT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const animationModel = builder.createObjectOffset(this.animationModel);

  return LaunchAnimationMethod.createLaunchAnimationMethod(builder,
    this.animationModelType,
    animationModel
  );
}
}
