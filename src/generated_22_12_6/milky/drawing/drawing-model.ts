// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DrawingId, DrawingIdT } from '../../milky/drawing/drawing-id.js';
import { DrawingType } from '../../milky/drawing/drawing-type.js';
import { Point2, Point2T } from '../../milky/drawing/point2.js';


export class DrawingModel implements flatbuffers.IUnpackableObject<DrawingModelT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DrawingModel {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDrawingModel(bb:flatbuffers.ByteBuffer, obj?:DrawingModel):DrawingModel {
  return (obj || new DrawingModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDrawingModel(bb:flatbuffers.ByteBuffer, obj?:DrawingModel):DrawingModel {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DrawingModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(obj?:DrawingId):DrawingId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DrawingId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

type():DrawingType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : DrawingType.HorizontalLine;
}

color():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

lineWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 1.0;
}

points(index: number, obj?:Point2):Point2|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Point2()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

pointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDrawingModel(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:DrawingType) {
  builder.addFieldInt32(1, type, DrawingType.HorizontalLine);
}

static addColor(builder:flatbuffers.Builder, color:number) {
  builder.addFieldInt32(2, color, 0);
}

static addLineWidth(builder:flatbuffers.Builder, lineWidth:number) {
  builder.addFieldFloat32(3, lineWidth, 1.0);
}

static addPoints(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, pointsOffset, 0);
}

static startPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static endDrawingModel(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDrawingModel(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, type:DrawingType, color:number, lineWidth:number, pointsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DrawingModel.startDrawingModel(builder);
  DrawingModel.addId(builder, idOffset);
  DrawingModel.addType(builder, type);
  DrawingModel.addColor(builder, color);
  DrawingModel.addLineWidth(builder, lineWidth);
  DrawingModel.addPoints(builder, pointsOffset);
  return DrawingModel.endDrawingModel(builder);
}

unpack(): DrawingModelT {
  return new DrawingModelT(
    (this.id() !== null ? this.id()!.unpack() : null),
    this.type(),
    this.color(),
    this.lineWidth(),
    this.bb!.createObjList<Point2, Point2T>(this.points.bind(this), this.pointsLength())
  );
}


unpackTo(_o: DrawingModelT): void {
  _o.id = (this.id() !== null ? this.id()!.unpack() : null);
  _o.type = this.type();
  _o.color = this.color();
  _o.lineWidth = this.lineWidth();
  _o.points = this.bb!.createObjList<Point2, Point2T>(this.points.bind(this), this.pointsLength());
}
}

export class DrawingModelT implements flatbuffers.IGeneratedObject {
constructor(
  public id: DrawingIdT|null = null,
  public type: DrawingType = DrawingType.HorizontalLine,
  public color: number = 0,
  public lineWidth: number = 1.0,
  public points: (Point2T)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? this.id!.pack(builder) : 0);
  const points = builder.createStructOffsetList(this.points, DrawingModel.startPointsVector);

  return DrawingModel.createDrawingModel(builder,
    id,
    this.type,
    this.color,
    this.lineWidth,
    points
  );
}
}
