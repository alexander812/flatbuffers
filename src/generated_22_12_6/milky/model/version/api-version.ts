// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ApiVersion implements flatbuffers.IUnpackableObject<ApiVersionT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ApiVersion {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

major():number {
  return this.bb!.readInt32(this.bb_pos);
}

minor():number {
  return this.bb!.readInt32(this.bb_pos + 4);
}

static sizeOf():number {
  return 8;
}

static createApiVersion(builder:flatbuffers.Builder, major: number, minor: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeInt32(minor);
  builder.writeInt32(major);
  return builder.offset();
}


unpack(): ApiVersionT {
  return new ApiVersionT(
    this.major(),
    this.minor()
  );
}


unpackTo(_o: ApiVersionT): void {
  _o.major = this.major();
  _o.minor = this.minor();
}
}

export class ApiVersionT implements flatbuffers.IGeneratedObject {
constructor(
  public major: number = 0,
  public minor: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ApiVersion.createApiVersion(builder,
    this.major,
    this.minor
  );
}
}
