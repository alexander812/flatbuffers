// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Quote, QuoteT } from '../../../milky/model/quote.js';
import { Time, TimeT } from '../../../milky/model/time.js';


export class Candle implements flatbuffers.IUnpackableObject<CandleT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Candle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCandle(bb:flatbuffers.ByteBuffer, obj?:Candle):Candle {
  return (obj || new Candle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCandle(bb:flatbuffers.ByteBuffer, obj?:Candle):Candle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Candle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

close(obj?:Quote):Quote|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
}

open(obj?:Quote):Quote|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
}

high(obj?:Quote):Quote|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
}

low(obj?:Quote):Quote|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
}

timestamp(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

volume(obj?:Quote):Quote|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startCandle(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addClose(builder:flatbuffers.Builder, closeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, closeOffset, 0);
}

static addOpen(builder:flatbuffers.Builder, openOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, openOffset, 0);
}

static addHigh(builder:flatbuffers.Builder, highOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, highOffset, 0);
}

static addLow(builder:flatbuffers.Builder, lowOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, lowOffset, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestampOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, timestampOffset, 0);
}

static addVolume(builder:flatbuffers.Builder, volumeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(5, volumeOffset, 0);
}

static endCandle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // close
  builder.requiredField(offset, 6) // open
  builder.requiredField(offset, 8) // high
  builder.requiredField(offset, 10) // low
  builder.requiredField(offset, 12) // timestamp
  return offset;
}


unpack(): CandleT {
  return new CandleT(
    (this.close() !== null ? this.close()!.unpack() : null),
    (this.open() !== null ? this.open()!.unpack() : null),
    (this.high() !== null ? this.high()!.unpack() : null),
    (this.low() !== null ? this.low()!.unpack() : null),
    (this.timestamp() !== null ? this.timestamp()!.unpack() : null),
    (this.volume() !== null ? this.volume()!.unpack() : null)
  );
}


unpackTo(_o: CandleT): void {
  _o.close = (this.close() !== null ? this.close()!.unpack() : null);
  _o.open = (this.open() !== null ? this.open()!.unpack() : null);
  _o.high = (this.high() !== null ? this.high()!.unpack() : null);
  _o.low = (this.low() !== null ? this.low()!.unpack() : null);
  _o.timestamp = (this.timestamp() !== null ? this.timestamp()!.unpack() : null);
  _o.volume = (this.volume() !== null ? this.volume()!.unpack() : null);
}
}

export class CandleT implements flatbuffers.IGeneratedObject {
constructor(
  public close: QuoteT|null = null,
  public open: QuoteT|null = null,
  public high: QuoteT|null = null,
  public low: QuoteT|null = null,
  public timestamp: TimeT|null = null,
  public volume: QuoteT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  Candle.startCandle(builder);
  Candle.addClose(builder, (this.close !== null ? this.close!.pack(builder) : 0));
  Candle.addOpen(builder, (this.open !== null ? this.open!.pack(builder) : 0));
  Candle.addHigh(builder, (this.high !== null ? this.high!.pack(builder) : 0));
  Candle.addLow(builder, (this.low !== null ? this.low!.pack(builder) : 0));
  Candle.addTimestamp(builder, (this.timestamp !== null ? this.timestamp!.pack(builder) : 0));
  Candle.addVolume(builder, (this.volume !== null ? this.volume!.pack(builder) : 0));

  return Candle.endCandle(builder);
}
}
