// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Rect, RectT } from '../../../milky/model/rect.js';
import { AreaVariants, unionToAreaVariants, unionListToAreaVariants } from '../../../milky/model/layout/area-variants.js';
import { ChartArea, ChartAreaT } from '../../../milky/model/layout/chart-area.js';
import { OscillatorArea, OscillatorAreaT } from '../../../milky/model/layout/oscillator-area.js';
import { TimeAxis, TimeAxisT } from '../../../milky/model/layout/time-axis.js';


export class AreaInfo implements flatbuffers.IUnpackableObject<AreaInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AreaInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAreaInfo(bb:flatbuffers.ByteBuffer, obj?:AreaInfo):AreaInfo {
  return (obj || new AreaInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAreaInfo(bb:flatbuffers.ByteBuffer, obj?:AreaInfo):AreaInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AreaInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

infoType():AreaVariants {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : AreaVariants.NONE;
}

info<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

rect(obj?:Rect):Rect|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Rect()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startAreaInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addInfoType(builder:flatbuffers.Builder, infoType:AreaVariants) {
  builder.addFieldInt8(0, infoType, AreaVariants.NONE);
}

static addInfo(builder:flatbuffers.Builder, infoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, infoOffset, 0);
}

static addRect(builder:flatbuffers.Builder, rectOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, rectOffset, 0);
}

static endAreaInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // info
  builder.requiredField(offset, 8) // rect
  return offset;
}


unpack(): AreaInfoT {
  return new AreaInfoT(
    this.infoType(),
    (() => {
      const temp = unionToAreaVariants(this.infoType(), this.info.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    (this.rect() !== null ? this.rect()!.unpack() : null)
  );
}


unpackTo(_o: AreaInfoT): void {
  _o.infoType = this.infoType();
  _o.info = (() => {
      const temp = unionToAreaVariants(this.infoType(), this.info.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.rect = (this.rect() !== null ? this.rect()!.unpack() : null);
}
}

export class AreaInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public infoType: AreaVariants = AreaVariants.NONE,
  public info: ChartAreaT|OscillatorAreaT|TimeAxisT|null = null,
  public rect: RectT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const info = builder.createObjectOffset(this.info);

  AreaInfo.startAreaInfo(builder);
  AreaInfo.addInfoType(builder, this.infoType);
  AreaInfo.addInfo(builder, info);
  AreaInfo.addRect(builder, (this.rect !== null ? this.rect!.pack(builder) : 0));

  return AreaInfo.endAreaInfo(builder);
}
}
