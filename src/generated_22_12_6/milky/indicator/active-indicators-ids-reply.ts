// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { IndicatorId, IndicatorIdT } from '../../milky/model/indicator/indicator-id.js';


export class ActiveIndicatorsIdsReply implements flatbuffers.IUnpackableObject<ActiveIndicatorsIdsReplyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ActiveIndicatorsIdsReply {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsActiveIndicatorsIdsReply(bb:flatbuffers.ByteBuffer, obj?:ActiveIndicatorsIdsReply):ActiveIndicatorsIdsReply {
  return (obj || new ActiveIndicatorsIdsReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsActiveIndicatorsIdsReply(bb:flatbuffers.ByteBuffer, obj?:ActiveIndicatorsIdsReply):ActiveIndicatorsIdsReply {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ActiveIndicatorsIdsReply()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ids(index: number, obj?:IndicatorId):IndicatorId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new IndicatorId()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 4, this.bb!) : null;
}

idsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startActiveIndicatorsIdsReply(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addIds(builder:flatbuffers.Builder, idsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idsOffset, 0);
}

static startIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endActiveIndicatorsIdsReply(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createActiveIndicatorsIdsReply(builder:flatbuffers.Builder, idsOffset:flatbuffers.Offset):flatbuffers.Offset {
  ActiveIndicatorsIdsReply.startActiveIndicatorsIdsReply(builder);
  ActiveIndicatorsIdsReply.addIds(builder, idsOffset);
  return ActiveIndicatorsIdsReply.endActiveIndicatorsIdsReply(builder);
}

unpack(): ActiveIndicatorsIdsReplyT {
  return new ActiveIndicatorsIdsReplyT(
    this.bb!.createObjList<IndicatorId, IndicatorIdT>(this.ids.bind(this), this.idsLength())
  );
}


unpackTo(_o: ActiveIndicatorsIdsReplyT): void {
  _o.ids = this.bb!.createObjList<IndicatorId, IndicatorIdT>(this.ids.bind(this), this.idsLength());
}
}

export class ActiveIndicatorsIdsReplyT implements flatbuffers.IGeneratedObject {
constructor(
  public ids: (IndicatorIdT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ids = builder.createStructOffsetList(this.ids, ActiveIndicatorsIdsReply.startIdsVector);

  return ActiveIndicatorsIdsReply.createActiveIndicatorsIdsReply(builder,
    ids
  );
}
}
