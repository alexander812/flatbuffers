// automatically generated by the FlatBuffers compiler, do not modify

import { ChangeHorizontalZoomBy, ChangeHorizontalZoomByT } from '../../milky/viewport/change-horizontal-zoom-by.js';
import { ResetDefaultVerticalZoom, ResetDefaultVerticalZoomT } from '../../milky/viewport/reset-default-vertical-zoom.js';
import { ReturnToLastCandle, ReturnToLastCandleT } from '../../milky/viewport/return-to-last-candle.js';
import { SetAreaChartZoomLimits, SetAreaChartZoomLimitsT } from '../../milky/viewport/set-area-chart-zoom-limits.js';
import { SetMinScreenFill, SetMinScreenFillT } from '../../milky/viewport/set-min-screen-fill.js';
import { SetStartPositionTime, SetStartPositionTimeT } from '../../milky/viewport/set-start-position-time.js';
import { SetVisibleTimeInterval, SetVisibleTimeIntervalT } from '../../milky/viewport/set-visible-time-interval.js';
import { ZoomToMax, ZoomToMaxT } from '../../milky/viewport/zoom-to-max.js';


export enum Methods {
  NONE = 0,
  ChangeHorizontalZoomBy = 1,
  SetAreaChartZoomLimits = 2,
  ResetDefaultVerticalZoom = 3,
  ReturnToLastCandle = 4,
  SetVisibleTimeInterval = 5,
  SetStartPositionTime = 6,
  ZoomToMax = 7,
  SetMinScreenFill = 8
}

export function unionToMethods(
  type: Methods,
  accessor: (obj:ChangeHorizontalZoomBy|ResetDefaultVerticalZoom|ReturnToLastCandle|SetAreaChartZoomLimits|SetMinScreenFill|SetStartPositionTime|SetVisibleTimeInterval|ZoomToMax) => ChangeHorizontalZoomBy|ResetDefaultVerticalZoom|ReturnToLastCandle|SetAreaChartZoomLimits|SetMinScreenFill|SetStartPositionTime|SetVisibleTimeInterval|ZoomToMax|null
): ChangeHorizontalZoomBy|ResetDefaultVerticalZoom|ReturnToLastCandle|SetAreaChartZoomLimits|SetMinScreenFill|SetStartPositionTime|SetVisibleTimeInterval|ZoomToMax|null {
  switch(Methods[type]) {
    case 'NONE': return null; 
    case 'ChangeHorizontalZoomBy': return accessor(new ChangeHorizontalZoomBy())! as ChangeHorizontalZoomBy;
    case 'SetAreaChartZoomLimits': return accessor(new SetAreaChartZoomLimits())! as SetAreaChartZoomLimits;
    case 'ResetDefaultVerticalZoom': return accessor(new ResetDefaultVerticalZoom())! as ResetDefaultVerticalZoom;
    case 'ReturnToLastCandle': return accessor(new ReturnToLastCandle())! as ReturnToLastCandle;
    case 'SetVisibleTimeInterval': return accessor(new SetVisibleTimeInterval())! as SetVisibleTimeInterval;
    case 'SetStartPositionTime': return accessor(new SetStartPositionTime())! as SetStartPositionTime;
    case 'ZoomToMax': return accessor(new ZoomToMax())! as ZoomToMax;
    case 'SetMinScreenFill': return accessor(new SetMinScreenFill())! as SetMinScreenFill;
    default: return null;
  }
}

export function unionListToMethods(
  type: Methods, 
  accessor: (index: number, obj:ChangeHorizontalZoomBy|ResetDefaultVerticalZoom|ReturnToLastCandle|SetAreaChartZoomLimits|SetMinScreenFill|SetStartPositionTime|SetVisibleTimeInterval|ZoomToMax) => ChangeHorizontalZoomBy|ResetDefaultVerticalZoom|ReturnToLastCandle|SetAreaChartZoomLimits|SetMinScreenFill|SetStartPositionTime|SetVisibleTimeInterval|ZoomToMax|null, 
  index: number
): ChangeHorizontalZoomBy|ResetDefaultVerticalZoom|ReturnToLastCandle|SetAreaChartZoomLimits|SetMinScreenFill|SetStartPositionTime|SetVisibleTimeInterval|ZoomToMax|null {
  switch(Methods[type]) {
    case 'NONE': return null; 
    case 'ChangeHorizontalZoomBy': return accessor(index, new ChangeHorizontalZoomBy())! as ChangeHorizontalZoomBy;
    case 'SetAreaChartZoomLimits': return accessor(index, new SetAreaChartZoomLimits())! as SetAreaChartZoomLimits;
    case 'ResetDefaultVerticalZoom': return accessor(index, new ResetDefaultVerticalZoom())! as ResetDefaultVerticalZoom;
    case 'ReturnToLastCandle': return accessor(index, new ReturnToLastCandle())! as ReturnToLastCandle;
    case 'SetVisibleTimeInterval': return accessor(index, new SetVisibleTimeInterval())! as SetVisibleTimeInterval;
    case 'SetStartPositionTime': return accessor(index, new SetStartPositionTime())! as SetStartPositionTime;
    case 'ZoomToMax': return accessor(index, new ZoomToMax())! as ZoomToMax;
    case 'SetMinScreenFill': return accessor(index, new SetMinScreenFill())! as SetMinScreenFill;
    default: return null;
  }
}
