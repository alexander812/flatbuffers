// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ProfitScaleDealAmount implements flatbuffers.IUnpackableObject<ProfitScaleDealAmountT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ProfitScaleDealAmount {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProfitScaleDealAmount(bb:flatbuffers.ByteBuffer, obj?:ProfitScaleDealAmount):ProfitScaleDealAmount {
  return (obj || new ProfitScaleDealAmount()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProfitScaleDealAmount(bb:flatbuffers.ByteBuffer, obj?:ProfitScaleDealAmount):ProfitScaleDealAmount {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProfitScaleDealAmount()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

amount():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startProfitScaleDealAmount(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addAmount(builder:flatbuffers.Builder, amount:number) {
  builder.addFieldFloat64(0, amount, 0.0);
}

static endProfitScaleDealAmount(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createProfitScaleDealAmount(builder:flatbuffers.Builder, amount:number):flatbuffers.Offset {
  ProfitScaleDealAmount.startProfitScaleDealAmount(builder);
  ProfitScaleDealAmount.addAmount(builder, amount);
  return ProfitScaleDealAmount.endProfitScaleDealAmount(builder);
}

unpack(): ProfitScaleDealAmountT {
  return new ProfitScaleDealAmountT(
    this.amount()
  );
}


unpackTo(_o: ProfitScaleDealAmountT): void {
  _o.amount = this.amount();
}
}

export class ProfitScaleDealAmountT implements flatbuffers.IGeneratedObject {
constructor(
  public amount: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ProfitScaleDealAmount.createProfitScaleDealAmount(builder,
    this.amount
  );
}
}
