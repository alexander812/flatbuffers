// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ColorScheme, ColorSchemeT } from '../../milky/colors/color-scheme.js';
import { Balance, BalanceT } from '../../milky/config/balance.js';
import { DealDuration, DealDurationT } from '../../milky/config/deal-duration.js';
import { DealExpiration, DealExpirationT } from '../../milky/config/deal-expiration.js';
import { DealTopUpEnabled, DealTopUpEnabledT } from '../../milky/config/deal-top-up-enabled.js';
import { DynamicZoomEnabled, DynamicZoomEnabledT } from '../../milky/config/dynamic-zoom-enabled.js';
import { ExpirationTimeLeftToBuyLimit, ExpirationTimeLeftToBuyLimitT } from '../../milky/config/expiration-time-left-to-buy-limit.js';
import { HorizontalZoomEnabled, HorizontalZoomEnabledT } from '../../milky/config/horizontal-zoom-enabled.js';
import { LibType, LibTypeT } from '../../milky/config/lib-type.js';
import { LimitStrikeProfit, LimitStrikeProfitT } from '../../milky/config/limit-strike-profit.js';
import { Locale, LocaleT } from '../../milky/config/locale.js';
import { NotificationLevelsEnabled, NotificationLevelsEnabledT } from '../../milky/config/notification-levels-enabled.js';
import { OptionProfitDownValue, OptionProfitDownValueT } from '../../milky/config/option-profit-down-value.js';
import { OptionProfitMeterEnabled, OptionProfitMeterEnabledT } from '../../milky/config/option-profit-meter-enabled.js';
import { OptionProfitUpValue, OptionProfitUpValueT } from '../../milky/config/option-profit-up-value.js';
import { Params, unionToParams, unionListToParams } from '../../milky/config/params.js';
import { PrecisionFormat, PrecisionFormatT } from '../../milky/config/precision-format.js';
import { ProfitScaleDealAmount, ProfitScaleDealAmountT } from '../../milky/config/profit-scale-deal-amount.js';
import { ProfitScaleDealCommission, ProfitScaleDealCommissionT } from '../../milky/config/profit-scale-deal-commission.js';
import { ProfitScaleDealMultiplier, ProfitScaleDealMultiplierT } from '../../milky/config/profit-scale-deal-multiplier.js';
import { ProfitScaleEnabled, ProfitScaleEnabledT } from '../../milky/config/profit-scale-enabled.js';
import { ScrollEnabled, ScrollEnabledT } from '../../milky/config/scroll-enabled.js';
import { SentimentEnable, SentimentEnableT } from '../../milky/config/sentiment-enable.js';
import { SentimentValue, SentimentValueT } from '../../milky/config/sentiment-value.js';
import { SetChartStatus, SetChartStatusT } from '../../milky/config/set-chart-status.js';
import { SetChartType, SetChartTypeT } from '../../milky/config/set-chart-type.js';
import { StopOrderEditModeEnabled, StopOrderEditModeEnabledT } from '../../milky/config/stop-order-edit-mode-enabled.js';
import { TrailingStopLossEnabled, TrailingStopLossEnabledT } from '../../milky/config/trailing-stop-loss-enabled.js';
import { VerticalZoomEnabled, VerticalZoomEnabledT } from '../../milky/config/vertical-zoom-enabled.js';


export class Request implements flatbuffers.IUnpackableObject<RequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Request {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequest(bb:flatbuffers.ByteBuffer, obj?:Request):Request {
  return (obj || new Request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequest(bb:flatbuffers.ByteBuffer, obj?:Request):Request {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

paramsType(index: number):Params|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

paramsTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

paramsTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

params(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

paramsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addParamsType(builder:flatbuffers.Builder, paramsTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, paramsTypeOffset, 0);
}

static createParamsTypeVector(builder:flatbuffers.Builder, data:Params[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startParamsTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addParams(builder:flatbuffers.Builder, paramsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, paramsOffset, 0);
}

static createParamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startParamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequest(builder:flatbuffers.Builder, paramsTypeOffset:flatbuffers.Offset, paramsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Request.startRequest(builder);
  Request.addParamsType(builder, paramsTypeOffset);
  Request.addParams(builder, paramsOffset);
  return Request.endRequest(builder);
}

unpack(): RequestT {
  return new RequestT(
    this.bb!.createScalarList<Params>(this.paramsType.bind(this), this.paramsTypeLength()),
    (() => {
    const ret: (BalanceT|ColorSchemeT|DealDurationT|DealExpirationT|DealTopUpEnabledT|DynamicZoomEnabledT|ExpirationTimeLeftToBuyLimitT|HorizontalZoomEnabledT|LibTypeT|LimitStrikeProfitT|LocaleT|NotificationLevelsEnabledT|OptionProfitDownValueT|OptionProfitMeterEnabledT|OptionProfitUpValueT|PrecisionFormatT|ProfitScaleDealAmountT|ProfitScaleDealCommissionT|ProfitScaleDealMultiplierT|ProfitScaleEnabledT|ScrollEnabledT|SentimentEnableT|SentimentValueT|SetChartStatusT|SetChartTypeT|StopOrderEditModeEnabledT|TrailingStopLossEnabledT|VerticalZoomEnabledT)[] = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.paramsTypeLength(); ++targetEnumIndex) {
      const targetEnum = this.paramsType(targetEnumIndex);
      if(targetEnum === null || Params[targetEnum!] === 'NONE') { continue; }

      const temp = unionListToParams(targetEnum, this.params.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })()
  );
}


unpackTo(_o: RequestT): void {
  _o.paramsType = this.bb!.createScalarList<Params>(this.paramsType.bind(this), this.paramsTypeLength());
  _o.params = (() => {
    const ret: (BalanceT|ColorSchemeT|DealDurationT|DealExpirationT|DealTopUpEnabledT|DynamicZoomEnabledT|ExpirationTimeLeftToBuyLimitT|HorizontalZoomEnabledT|LibTypeT|LimitStrikeProfitT|LocaleT|NotificationLevelsEnabledT|OptionProfitDownValueT|OptionProfitMeterEnabledT|OptionProfitUpValueT|PrecisionFormatT|ProfitScaleDealAmountT|ProfitScaleDealCommissionT|ProfitScaleDealMultiplierT|ProfitScaleEnabledT|ScrollEnabledT|SentimentEnableT|SentimentValueT|SetChartStatusT|SetChartTypeT|StopOrderEditModeEnabledT|TrailingStopLossEnabledT|VerticalZoomEnabledT)[] = [];
    for(let targetEnumIndex = 0; targetEnumIndex < this.paramsTypeLength(); ++targetEnumIndex) {
      const targetEnum = this.paramsType(targetEnumIndex);
      if(targetEnum === null || Params[targetEnum!] === 'NONE') { continue; }

      const temp = unionListToParams(targetEnum, this.params.bind(this), targetEnumIndex);
      if(temp === null) { continue; }
      ret.push(temp.unpack());
    }
    return ret;
  })();
}
}

export class RequestT implements flatbuffers.IGeneratedObject {
constructor(
  public paramsType: (Params)[] = [],
  public params: (BalanceT|ColorSchemeT|DealDurationT|DealExpirationT|DealTopUpEnabledT|DynamicZoomEnabledT|ExpirationTimeLeftToBuyLimitT|HorizontalZoomEnabledT|LibTypeT|LimitStrikeProfitT|LocaleT|NotificationLevelsEnabledT|OptionProfitDownValueT|OptionProfitMeterEnabledT|OptionProfitUpValueT|PrecisionFormatT|ProfitScaleDealAmountT|ProfitScaleDealCommissionT|ProfitScaleDealMultiplierT|ProfitScaleEnabledT|ScrollEnabledT|SentimentEnableT|SentimentValueT|SetChartStatusT|SetChartTypeT|StopOrderEditModeEnabledT|TrailingStopLossEnabledT|VerticalZoomEnabledT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const paramsType = Request.createParamsTypeVector(builder, this.paramsType);
  const params = Request.createParamsVector(builder, builder.createObjectOffsetList(this.params));

  return Request.createRequest(builder,
    paramsType,
    params
  );
}
}
