// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { StrikeId, StrikeIdT } from '../../milky/model/strike/strike-id.js';


export class OnStrikeUnselected implements flatbuffers.IUnpackableObject<OnStrikeUnselectedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OnStrikeUnselected {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOnStrikeUnselected(bb:flatbuffers.ByteBuffer, obj?:OnStrikeUnselected):OnStrikeUnselected {
  return (obj || new OnStrikeUnselected()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOnStrikeUnselected(bb:flatbuffers.ByteBuffer, obj?:OnStrikeUnselected):OnStrikeUnselected {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OnStrikeUnselected()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(obj?:StrikeId):StrikeId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new StrikeId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startOnStrikeUnselected(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static endOnStrikeUnselected(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  return offset;
}

static createOnStrikeUnselected(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset):flatbuffers.Offset {
  OnStrikeUnselected.startOnStrikeUnselected(builder);
  OnStrikeUnselected.addId(builder, idOffset);
  return OnStrikeUnselected.endOnStrikeUnselected(builder);
}

unpack(): OnStrikeUnselectedT {
  return new OnStrikeUnselectedT(
    (this.id() !== null ? this.id()!.unpack() : null)
  );
}


unpackTo(_o: OnStrikeUnselectedT): void {
  _o.id = (this.id() !== null ? this.id()!.unpack() : null);
}
}

export class OnStrikeUnselectedT implements flatbuffers.IGeneratedObject {
constructor(
  public id: StrikeIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? this.id!.pack(builder) : 0);

  return OnStrikeUnselected.createOnStrikeUnselected(builder,
    id
  );
}
}
