// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { RequestFromChart, unionToRequestFromChart, unionListToRequestFromChart } from '../milky/request-from-chart.js';
import { Notify as milky_adviser_Notify, NotifyT as milky_adviser_NotifyT } from '../milky/adviser/notify.js';
import { Notify as milky_deal_limits_Notify, NotifyT as milky_deal_limits_NotifyT } from '../milky/deal-limits/notify.js';
import { Notify, NotifyT } from '../milky/deals/notify.js';
import { Notify as milky_drawing_Notify, NotifyT as milky_drawing_NotifyT } from '../milky/drawing/notify.js';
import { Notify as milky_layout_Notify, NotifyT as milky_layout_NotifyT } from '../milky/layout/notify.js';
import { Notify as milky_notification_level_Notify, NotifyT as milky_notification_level_NotifyT } from '../milky/notification-level/notify.js';
import { Notify as milky_quotes_Notify, NotifyT as milky_quotes_NotifyT } from '../milky/quotes/notify.js';
import { Notify as milky_resources_Notify, NotifyT as milky_resources_NotifyT } from '../milky/resources/notify.js';
import { Notify as milky_strikes_Notify, NotifyT as milky_strikes_NotifyT } from '../milky/strikes/notify.js';
import { Notify as milky_time_intervals_Notify, NotifyT as milky_time_intervals_NotifyT } from '../milky/time-intervals/notify.js';


export class InputFromChart implements flatbuffers.IUnpackableObject<InputFromChartT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):InputFromChart {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInputFromChart(bb:flatbuffers.ByteBuffer, obj?:InputFromChart):InputFromChart {
  return (obj || new InputFromChart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInputFromChart(bb:flatbuffers.ByteBuffer, obj?:InputFromChart):InputFromChart {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new InputFromChart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

requestType():RequestFromChart {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : RequestFromChart.NONE;
}

request<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startInputFromChart(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRequestType(builder:flatbuffers.Builder, requestType:RequestFromChart) {
  builder.addFieldInt8(0, requestType, RequestFromChart.NONE);
}

static addRequest(builder:flatbuffers.Builder, requestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, requestOffset, 0);
}

static endInputFromChart(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createInputFromChart(builder:flatbuffers.Builder, requestType:RequestFromChart, requestOffset:flatbuffers.Offset):flatbuffers.Offset {
  InputFromChart.startInputFromChart(builder);
  InputFromChart.addRequestType(builder, requestType);
  InputFromChart.addRequest(builder, requestOffset);
  return InputFromChart.endInputFromChart(builder);
}

unpack(): InputFromChartT {
  return new InputFromChartT(
    this.requestType(),
    (() => {
      const temp = unionToRequestFromChart(this.requestType(), this.request.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: InputFromChartT): void {
  _o.requestType = this.requestType();
  _o.request = (() => {
      const temp = unionToRequestFromChart(this.requestType(), this.request.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class InputFromChartT implements flatbuffers.IGeneratedObject {
constructor(
  public requestType: RequestFromChart = RequestFromChart.NONE,
  public request: NotifyT|milky_adviser_NotifyT|milky_deal_limits_NotifyT|milky_drawing_NotifyT|milky_layout_NotifyT|milky_notification_level_NotifyT|milky_quotes_NotifyT|milky_resources_NotifyT|milky_strikes_NotifyT|milky_time_intervals_NotifyT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const request = builder.createObjectOffset(this.request);

  return InputFromChart.createInputFromChart(builder,
    this.requestType,
    request
  );
}
}
