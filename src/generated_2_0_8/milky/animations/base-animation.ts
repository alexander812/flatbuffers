// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { IconType, IconTypeT } from '../../milky/model/icon-type';
import { Quote, QuoteT } from '../../milky/model/quote';
import { Time, TimeT } from '../../milky/model/time';


export class BaseAnimation {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BaseAnimation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBaseAnimation(bb:flatbuffers.ByteBuffer, obj?:BaseAnimation):BaseAnimation {
  return (obj || new BaseAnimation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBaseAnimation(bb:flatbuffers.ByteBuffer, obj?:BaseAnimation):BaseAnimation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BaseAnimation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timestamp(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

quote(obj?:Quote):Quote|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Quote()).__init(this.bb_pos + offset, this.bb!) : null;
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

duration(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

iconType(obj?:IconType):IconType|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new IconType()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startBaseAnimation(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addTimestamp(builder:flatbuffers.Builder, timestampOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, timestampOffset, 0);
}

static addQuote(builder:flatbuffers.Builder, quoteOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, quoteOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, textOffset, 0);
}

static addDuration(builder:flatbuffers.Builder, durationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, durationOffset, 0);
}

static addIconType(builder:flatbuffers.Builder, iconTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, iconTypeOffset, 0);
}

static endBaseAnimation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // timestamp
  builder.requiredField(offset, 6) // quote
  builder.requiredField(offset, 8) // text
  builder.requiredField(offset, 10) // duration
  builder.requiredField(offset, 12) // icon_type
  return offset;
}


unpack(): BaseAnimationT {
  return new BaseAnimationT(
    (this.timestamp() !== null ? this.timestamp()!.unpack() : null),
    (this.quote() !== null ? this.quote()!.unpack() : null),
    this.text(),
    (this.duration() !== null ? this.duration()!.unpack() : null),
    (this.iconType() !== null ? this.iconType()!.unpack() : null)
  );
}


unpackTo(_o: BaseAnimationT): void {
  _o.timestamp = (this.timestamp() !== null ? this.timestamp()!.unpack() : null);
  _o.quote = (this.quote() !== null ? this.quote()!.unpack() : null);
  _o.text = this.text();
  _o.duration = (this.duration() !== null ? this.duration()!.unpack() : null);
  _o.iconType = (this.iconType() !== null ? this.iconType()!.unpack() : null);
}
}

export class BaseAnimationT {
constructor(
  public timestamp: TimeT|null = null,
  public quote: QuoteT|null = null,
  public text: string|Uint8Array|null = null,
  public duration: TimeT|null = null,
  public iconType: IconTypeT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const text = (this.text !== null ? builder.createString(this.text!) : 0);
  const iconType = (this.iconType !== null ? this.iconType!.pack(builder) : 0);

  BaseAnimation.startBaseAnimation(builder);
  BaseAnimation.addTimestamp(builder, (this.timestamp !== null ? this.timestamp!.pack(builder) : 0));
  BaseAnimation.addQuote(builder, (this.quote !== null ? this.quote!.pack(builder) : 0));
  BaseAnimation.addText(builder, text);
  BaseAnimation.addDuration(builder, (this.duration !== null ? this.duration!.pack(builder) : 0));
  BaseAnimation.addIconType(builder, iconType);

  return BaseAnimation.endBaseAnimation(builder);
}
}
