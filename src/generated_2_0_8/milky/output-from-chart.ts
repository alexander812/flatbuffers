// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ReplyFromChart, unionToReplyFromChart, unionListToReplyFromChart } from '../milky/reply-from-chart';
import { Reply, ReplyT } from '../milky/common/reply';
import { Reply as milky_deals_Reply, ReplyT as milky_deals_ReplyT } from '../milky/deals/reply';
import { ActiveIndicatorsIdsReply, ActiveIndicatorsIdsReplyT } from '../milky/indicator/active-indicators-ids-reply';
import { Reply as milky_layout_Reply, ReplyT as milky_layout_ReplyT } from '../milky/layout/reply';
import { Reply as milky_quotes_Reply, ReplyT as milky_quotes_ReplyT } from '../milky/quotes/reply';
import { Reply as milky_strikes_Reply, ReplyT as milky_strikes_ReplyT } from '../milky/strikes/reply';
import { Reply as milky_version_Reply, ReplyT as milky_version_ReplyT } from '../milky/version/reply';


export class OutputFromChart {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OutputFromChart {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOutputFromChart(bb:flatbuffers.ByteBuffer, obj?:OutputFromChart):OutputFromChart {
  return (obj || new OutputFromChart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOutputFromChart(bb:flatbuffers.ByteBuffer, obj?:OutputFromChart):OutputFromChart {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OutputFromChart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

replyType():ReplyFromChart {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ReplyFromChart.NONE;
}

reply<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

/**
 * exact copy of same field from InputFromClient
 */
requestId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * return type id of request according enum RequestFromClient, to let testing the flow order
 */
requestType():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startOutputFromChart(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addReplyType(builder:flatbuffers.Builder, replyType:ReplyFromChart) {
  builder.addFieldInt8(0, replyType, ReplyFromChart.NONE);
}

static addReply(builder:flatbuffers.Builder, replyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, replyOffset, 0);
}

static addRequestId(builder:flatbuffers.Builder, requestId:number) {
  builder.addFieldInt32(2, requestId, 0);
}

static addRequestType(builder:flatbuffers.Builder, requestType:number) {
  builder.addFieldInt32(3, requestType, 0);
}

static endOutputFromChart(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOutputFromChart(builder:flatbuffers.Builder, replyType:ReplyFromChart, replyOffset:flatbuffers.Offset, requestId:number, requestType:number):flatbuffers.Offset {
  OutputFromChart.startOutputFromChart(builder);
  OutputFromChart.addReplyType(builder, replyType);
  OutputFromChart.addReply(builder, replyOffset);
  OutputFromChart.addRequestId(builder, requestId);
  OutputFromChart.addRequestType(builder, requestType);
  return OutputFromChart.endOutputFromChart(builder);
}

unpack(): OutputFromChartT {
  return new OutputFromChartT(
    this.replyType(),
    (() => {
      let temp = unionToReplyFromChart(this.replyType(), this.reply.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    this.requestId(),
    this.requestType()
  );
}


unpackTo(_o: OutputFromChartT): void {
  _o.replyType = this.replyType();
  _o.reply = (() => {
      let temp = unionToReplyFromChart(this.replyType(), this.reply.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.requestId = this.requestId();
  _o.requestType = this.requestType();
}
}

export class OutputFromChartT {
constructor(
  public replyType: ReplyFromChart = ReplyFromChart.NONE,
  public reply: ActiveIndicatorsIdsReplyT|ReplyT|milky_deals_ReplyT|milky_layout_ReplyT|milky_quotes_ReplyT|milky_strikes_ReplyT|milky_version_ReplyT|null = null,
  public requestId: number = 0,
  public requestType: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const reply = builder.createObjectOffset(this.reply);

  return OutputFromChart.createOutputFromChart(builder,
    this.replyType,
    reply,
    this.requestId,
    this.requestType
  );
}
}
