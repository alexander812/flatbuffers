// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class TimeAxis {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TimeAxis {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTimeAxis(bb:flatbuffers.ByteBuffer, obj?:TimeAxis):TimeAxis {
  return (obj || new TimeAxis()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTimeAxis(bb:flatbuffers.ByteBuffer, obj?:TimeAxis):TimeAxis {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TimeAxis()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startTimeAxis(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endTimeAxis(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTimeAxis(builder:flatbuffers.Builder):flatbuffers.Offset {
  TimeAxis.startTimeAxis(builder);
  return TimeAxis.endTimeAxis(builder);
}

unpack(): TimeAxisT {
  return new TimeAxisT();
}


unpackTo(_o: TimeAxisT): void {}
}

export class TimeAxisT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TimeAxis.createTimeAxis(builder);
}
}
