// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class IndicatorComponentId {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IndicatorComponentId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

value():number {
  return this.bb!.readUint32(this.bb_pos);
}

static sizeOf():number {
  return 4;
}

static createIndicatorComponentId(builder:flatbuffers.Builder, value: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeInt32(value);
  return builder.offset();
}


unpack(): IndicatorComponentIdT {
  return new IndicatorComponentIdT(
    this.value()
  );
}


unpackTo(_o: IndicatorComponentIdT): void {
  _o.value = this.value();
}
}

export class IndicatorComponentIdT {
constructor(
  public value: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return IndicatorComponentId.createIndicatorComponentId(builder,
    this.value
  );
}
}
