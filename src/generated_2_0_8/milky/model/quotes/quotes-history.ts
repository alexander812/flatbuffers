// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Candle, CandleT } from '../../../milky/model/quotes/candle';
import { Tick, TickT } from '../../../milky/model/quotes/tick';


export class QuotesHistory {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):QuotesHistory {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsQuotesHistory(bb:flatbuffers.ByteBuffer, obj?:QuotesHistory):QuotesHistory {
  return (obj || new QuotesHistory()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsQuotesHistory(bb:flatbuffers.ByteBuffer, obj?:QuotesHistory):QuotesHistory {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new QuotesHistory()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

candles(index: number, obj?:Candle):Candle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Candle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

candlesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ticks(index: number, obj?:Tick):Tick|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Tick()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

ticksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lastCandle(obj?:Candle):Candle|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Candle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

isHistoryFinished():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isInitial():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

timeFrame():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startQuotesHistory(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addCandles(builder:flatbuffers.Builder, candlesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, candlesOffset, 0);
}

static createCandlesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCandlesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTicks(builder:flatbuffers.Builder, ticksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ticksOffset, 0);
}

static createTicksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTicksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLastCandle(builder:flatbuffers.Builder, lastCandleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, lastCandleOffset, 0);
}

static addIsHistoryFinished(builder:flatbuffers.Builder, isHistoryFinished:boolean) {
  builder.addFieldInt8(3, +isHistoryFinished, +false);
}

static addIsInitial(builder:flatbuffers.Builder, isInitial:boolean) {
  builder.addFieldInt8(4, +isInitial, +false);
}

static addTimeFrame(builder:flatbuffers.Builder, timeFrame:number) {
  builder.addFieldInt32(5, timeFrame, 0);
}

static endQuotesHistory(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // candles
  builder.requiredField(offset, 6) // ticks
  builder.requiredField(offset, 8) // last_candle
  return offset;
}


unpack(): QuotesHistoryT {
  return new QuotesHistoryT(
    this.bb!.createObjList(this.candles.bind(this), this.candlesLength()),
    this.bb!.createObjList(this.ticks.bind(this), this.ticksLength()),
    (this.lastCandle() !== null ? this.lastCandle()!.unpack() : null),
    this.isHistoryFinished(),
    this.isInitial(),
    this.timeFrame()
  );
}


unpackTo(_o: QuotesHistoryT): void {
  _o.candles = this.bb!.createObjList(this.candles.bind(this), this.candlesLength());
  _o.ticks = this.bb!.createObjList(this.ticks.bind(this), this.ticksLength());
  _o.lastCandle = (this.lastCandle() !== null ? this.lastCandle()!.unpack() : null);
  _o.isHistoryFinished = this.isHistoryFinished();
  _o.isInitial = this.isInitial();
  _o.timeFrame = this.timeFrame();
}
}

export class QuotesHistoryT {
constructor(
  public candles: (CandleT)[] = [],
  public ticks: (TickT)[] = [],
  public lastCandle: CandleT|null = null,
  public isHistoryFinished: boolean = false,
  public isInitial: boolean = false,
  public timeFrame: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const candles = QuotesHistory.createCandlesVector(builder, builder.createObjectOffsetList(this.candles));
  const ticks = QuotesHistory.createTicksVector(builder, builder.createObjectOffsetList(this.ticks));
  const lastCandle = (this.lastCandle !== null ? this.lastCandle!.pack(builder) : 0);

  QuotesHistory.startQuotesHistory(builder);
  QuotesHistory.addCandles(builder, candles);
  QuotesHistory.addTicks(builder, ticks);
  QuotesHistory.addLastCandle(builder, lastCandle);
  QuotesHistory.addIsHistoryFinished(builder, this.isHistoryFinished);
  QuotesHistory.addIsInitial(builder, this.isInitial);
  QuotesHistory.addTimeFrame(builder, this.timeFrame);

  return QuotesHistory.endQuotesHistory(builder);
}
}
