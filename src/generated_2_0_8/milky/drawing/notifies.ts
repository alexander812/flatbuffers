// automatically generated by the FlatBuffers compiler, do not modify

import { CreatedDrawingNotify, CreatedDrawingNotifyT } from '../../milky/drawing/created-drawing-notify';
import { EditedDrawingNotify, EditedDrawingNotifyT } from '../../milky/drawing/edited-drawing-notify';
import { EditedDrawingNotify2, EditedDrawingNotify2T } from '../../milky/drawing/edited-drawing-notify2';
import { EditedDrawingNotify3, EditedDrawingNotify3T } from '../../milky/drawing/edited-drawing-notify3';
import { EditedDrawingNotify4, EditedDrawingNotify4T } from '../../milky/drawing/edited-drawing-notify4';
import { SelectedDrawingNotify, SelectedDrawingNotifyT } from '../../milky/drawing/selected-drawing-notify';
import { UnselectedDrawingNotify, UnselectedDrawingNotifyT } from '../../milky/drawing/unselected-drawing-notify';


export enum Notifies {
  NONE = 0,
  EditedDrawingNotify = 1,
  EditedDrawingNotify2 = 2,
  EditedDrawingNotify3 = 3,
  EditedDrawingNotify4 = 4,
  SelectedDrawingNotify = 5,
  UnselectedDrawingNotify = 6,
  CreatedDrawingNotify = 7
}

export function unionToNotifies(
  type: Notifies,
  accessor: (obj:CreatedDrawingNotify|EditedDrawingNotify|EditedDrawingNotify2|EditedDrawingNotify3|EditedDrawingNotify4|SelectedDrawingNotify|UnselectedDrawingNotify) => CreatedDrawingNotify|EditedDrawingNotify|EditedDrawingNotify2|EditedDrawingNotify3|EditedDrawingNotify4|SelectedDrawingNotify|UnselectedDrawingNotify|null
): CreatedDrawingNotify|EditedDrawingNotify|EditedDrawingNotify2|EditedDrawingNotify3|EditedDrawingNotify4|SelectedDrawingNotify|UnselectedDrawingNotify|null {
  switch(Notifies[type]) {
    case 'NONE': return null; 
    case 'EditedDrawingNotify': return accessor(new EditedDrawingNotify())! as EditedDrawingNotify;
    case 'EditedDrawingNotify2': return accessor(new EditedDrawingNotify2())! as EditedDrawingNotify2;
    case 'EditedDrawingNotify3': return accessor(new EditedDrawingNotify3())! as EditedDrawingNotify3;
    case 'EditedDrawingNotify4': return accessor(new EditedDrawingNotify4())! as EditedDrawingNotify4;
    case 'SelectedDrawingNotify': return accessor(new SelectedDrawingNotify())! as SelectedDrawingNotify;
    case 'UnselectedDrawingNotify': return accessor(new UnselectedDrawingNotify())! as UnselectedDrawingNotify;
    case 'CreatedDrawingNotify': return accessor(new CreatedDrawingNotify())! as CreatedDrawingNotify;
    default: return null;
  }
}

export function unionListToNotifies(
  type: Notifies, 
  accessor: (index: number, obj:CreatedDrawingNotify|EditedDrawingNotify|EditedDrawingNotify2|EditedDrawingNotify3|EditedDrawingNotify4|SelectedDrawingNotify|UnselectedDrawingNotify) => CreatedDrawingNotify|EditedDrawingNotify|EditedDrawingNotify2|EditedDrawingNotify3|EditedDrawingNotify4|SelectedDrawingNotify|UnselectedDrawingNotify|null, 
  index: number
): CreatedDrawingNotify|EditedDrawingNotify|EditedDrawingNotify2|EditedDrawingNotify3|EditedDrawingNotify4|SelectedDrawingNotify|UnselectedDrawingNotify|null {
  switch(Notifies[type]) {
    case 'NONE': return null; 
    case 'EditedDrawingNotify': return accessor(index, new EditedDrawingNotify())! as EditedDrawingNotify;
    case 'EditedDrawingNotify2': return accessor(index, new EditedDrawingNotify2())! as EditedDrawingNotify2;
    case 'EditedDrawingNotify3': return accessor(index, new EditedDrawingNotify3())! as EditedDrawingNotify3;
    case 'EditedDrawingNotify4': return accessor(index, new EditedDrawingNotify4())! as EditedDrawingNotify4;
    case 'SelectedDrawingNotify': return accessor(index, new SelectedDrawingNotify())! as SelectedDrawingNotify;
    case 'UnselectedDrawingNotify': return accessor(index, new UnselectedDrawingNotify())! as UnselectedDrawingNotify;
    case 'CreatedDrawingNotify': return accessor(index, new CreatedDrawingNotify())! as CreatedDrawingNotify;
    default: return null;
  }
}
