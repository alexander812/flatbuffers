// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Point2, Point2T } from '../../milky/drawing/point2';


export class DrawingModel4 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DrawingModel4 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDrawingModel4(bb:flatbuffers.ByteBuffer, obj?:DrawingModel4):DrawingModel4 {
  return (obj || new DrawingModel4()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDrawingModel4(bb:flatbuffers.ByteBuffer, obj?:DrawingModel4):DrawingModel4 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DrawingModel4()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

color():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

points(index: number, obj?:Point2):Point2|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Point2()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

pointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDrawingModel4(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addColor(builder:flatbuffers.Builder, color:number) {
  builder.addFieldInt32(1, color, 0);
}

static addPoints(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, pointsOffset, 0);
}

static startPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static endDrawingModel4(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDrawingModel4(builder:flatbuffers.Builder, id:number, color:number, pointsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DrawingModel4.startDrawingModel4(builder);
  DrawingModel4.addId(builder, id);
  DrawingModel4.addColor(builder, color);
  DrawingModel4.addPoints(builder, pointsOffset);
  return DrawingModel4.endDrawingModel4(builder);
}

unpack(): DrawingModel4T {
  return new DrawingModel4T(
    this.id(),
    this.color(),
    this.bb!.createObjList(this.points.bind(this), this.pointsLength())
  );
}


unpackTo(_o: DrawingModel4T): void {
  _o.id = this.id();
  _o.color = this.color();
  _o.points = this.bb!.createObjList(this.points.bind(this), this.pointsLength());
}
}

export class DrawingModel4T {
constructor(
  public id: number = 0,
  public color: number = 0,
  public points: (Point2T)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const points = builder.createStructOffsetList(this.points, DrawingModel4.startPointsVector);

  return DrawingModel4.createDrawingModel4(builder,
    this.id,
    this.color,
    points
  );
}
}
