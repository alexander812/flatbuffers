// automatically generated by the FlatBuffers compiler, do not modify

import { ColorScheme, ColorSchemeT } from '../../milky/colors/color-scheme';
import { Balance, BalanceT } from '../../milky/config/balance';
import { DealDuration, DealDurationT } from '../../milky/config/deal-duration';
import { DealExpiration, DealExpirationT } from '../../milky/config/deal-expiration';
import { DealTopUpEnabled, DealTopUpEnabledT } from '../../milky/config/deal-top-up-enabled';
import { DynamicZoomEnabled, DynamicZoomEnabledT } from '../../milky/config/dynamic-zoom-enabled';
import { ExpirationTimeLeftToBuyLimit, ExpirationTimeLeftToBuyLimitT } from '../../milky/config/expiration-time-left-to-buy-limit';
import { HorizontalZoomEnabled, HorizontalZoomEnabledT } from '../../milky/config/horizontal-zoom-enabled';
import { LibType, LibTypeT } from '../../milky/config/lib-type';
import { LimitStrikeProfit, LimitStrikeProfitT } from '../../milky/config/limit-strike-profit';
import { Locale, LocaleT } from '../../milky/config/locale';
import { NotificationLevelsEnabled, NotificationLevelsEnabledT } from '../../milky/config/notification-levels-enabled';
import { OptionProfitDownValue, OptionProfitDownValueT } from '../../milky/config/option-profit-down-value';
import { OptionProfitMeterEnabled, OptionProfitMeterEnabledT } from '../../milky/config/option-profit-meter-enabled';
import { OptionProfitUpValue, OptionProfitUpValueT } from '../../milky/config/option-profit-up-value';
import { PrecisionFormat, PrecisionFormatT } from '../../milky/config/precision-format';
import { ProfitScaleDealAmount, ProfitScaleDealAmountT } from '../../milky/config/profit-scale-deal-amount';
import { ProfitScaleDealCommission, ProfitScaleDealCommissionT } from '../../milky/config/profit-scale-deal-commission';
import { ProfitScaleDealMultiplier, ProfitScaleDealMultiplierT } from '../../milky/config/profit-scale-deal-multiplier';
import { ProfitScaleEnabled, ProfitScaleEnabledT } from '../../milky/config/profit-scale-enabled';
import { ScrollEnabled, ScrollEnabledT } from '../../milky/config/scroll-enabled';
import { SentimentEnable, SentimentEnableT } from '../../milky/config/sentiment-enable';
import { SentimentValue, SentimentValueT } from '../../milky/config/sentiment-value';
import { SetChartStatus, SetChartStatusT } from '../../milky/config/set-chart-status';
import { SetChartType, SetChartTypeT } from '../../milky/config/set-chart-type';
import { StopOrderEditModeEnabled, StopOrderEditModeEnabledT } from '../../milky/config/stop-order-edit-mode-enabled';
import { TrailingStopLossEnabled, TrailingStopLossEnabledT } from '../../milky/config/trailing-stop-loss-enabled';
import { VerticalZoomEnabled, VerticalZoomEnabledT } from '../../milky/config/vertical-zoom-enabled';


export enum Params {
  NONE = 0,
  Locale = 1,
  SetChartType = 2,
  SetChartStatus = 3,
  DealDuration = 4,
  DealExpiration = 5,
  OptionProfitUpValue = 6,
  OptionProfitDownValue = 7,
  OptionProfitMeterEnabled = 8,
  TrailingStopLossEnabled = 9,
  ProfitScaleDealCommission = 10,
  ProfitScaleDealAmount = 11,
  ProfitScaleDealMultiplier = 12,
  Balance = 13,
  LibType = 14,
  ProfitScaleEnabled = 15,
  LimitStrikeProfit = 16,
  ExpirationTimeLeftToBuyLimit = 17,
  StopOrderEditModeEnabled = 18,
  PrecisionFormat = 19,
  DynamicZoomEnabled = 20,
  NotificationLevelsEnabled = 21,
  DealTopUpEnabled = 22,
  colors_ColorScheme = 23,
  SentimentValue = 24,
  SentimentEnable = 25,
  HorizontalZoomEnabled = 26,
  VerticalZoomEnabled = 27,
  ScrollEnabled = 28
}

export function unionToParams(
  type: Params,
  accessor: (obj:Balance|ColorScheme|DealDuration|DealExpiration|DealTopUpEnabled|DynamicZoomEnabled|ExpirationTimeLeftToBuyLimit|HorizontalZoomEnabled|LibType|LimitStrikeProfit|Locale|NotificationLevelsEnabled|OptionProfitDownValue|OptionProfitMeterEnabled|OptionProfitUpValue|PrecisionFormat|ProfitScaleDealAmount|ProfitScaleDealCommission|ProfitScaleDealMultiplier|ProfitScaleEnabled|ScrollEnabled|SentimentEnable|SentimentValue|SetChartStatus|SetChartType|StopOrderEditModeEnabled|TrailingStopLossEnabled|VerticalZoomEnabled) => Balance|ColorScheme|DealDuration|DealExpiration|DealTopUpEnabled|DynamicZoomEnabled|ExpirationTimeLeftToBuyLimit|HorizontalZoomEnabled|LibType|LimitStrikeProfit|Locale|NotificationLevelsEnabled|OptionProfitDownValue|OptionProfitMeterEnabled|OptionProfitUpValue|PrecisionFormat|ProfitScaleDealAmount|ProfitScaleDealCommission|ProfitScaleDealMultiplier|ProfitScaleEnabled|ScrollEnabled|SentimentEnable|SentimentValue|SetChartStatus|SetChartType|StopOrderEditModeEnabled|TrailingStopLossEnabled|VerticalZoomEnabled|null
): Balance|ColorScheme|DealDuration|DealExpiration|DealTopUpEnabled|DynamicZoomEnabled|ExpirationTimeLeftToBuyLimit|HorizontalZoomEnabled|LibType|LimitStrikeProfit|Locale|NotificationLevelsEnabled|OptionProfitDownValue|OptionProfitMeterEnabled|OptionProfitUpValue|PrecisionFormat|ProfitScaleDealAmount|ProfitScaleDealCommission|ProfitScaleDealMultiplier|ProfitScaleEnabled|ScrollEnabled|SentimentEnable|SentimentValue|SetChartStatus|SetChartType|StopOrderEditModeEnabled|TrailingStopLossEnabled|VerticalZoomEnabled|null {
  switch(Params[type]) {
    case 'NONE': return null; 
    case 'Locale': return accessor(new Locale())! as Locale;
    case 'SetChartType': return accessor(new SetChartType())! as SetChartType;
    case 'SetChartStatus': return accessor(new SetChartStatus())! as SetChartStatus;
    case 'DealDuration': return accessor(new DealDuration())! as DealDuration;
    case 'DealExpiration': return accessor(new DealExpiration())! as DealExpiration;
    case 'OptionProfitUpValue': return accessor(new OptionProfitUpValue())! as OptionProfitUpValue;
    case 'OptionProfitDownValue': return accessor(new OptionProfitDownValue())! as OptionProfitDownValue;
    case 'OptionProfitMeterEnabled': return accessor(new OptionProfitMeterEnabled())! as OptionProfitMeterEnabled;
    case 'TrailingStopLossEnabled': return accessor(new TrailingStopLossEnabled())! as TrailingStopLossEnabled;
    case 'ProfitScaleDealCommission': return accessor(new ProfitScaleDealCommission())! as ProfitScaleDealCommission;
    case 'ProfitScaleDealAmount': return accessor(new ProfitScaleDealAmount())! as ProfitScaleDealAmount;
    case 'ProfitScaleDealMultiplier': return accessor(new ProfitScaleDealMultiplier())! as ProfitScaleDealMultiplier;
    case 'Balance': return accessor(new Balance())! as Balance;
    case 'LibType': return accessor(new LibType())! as LibType;
    case 'ProfitScaleEnabled': return accessor(new ProfitScaleEnabled())! as ProfitScaleEnabled;
    case 'LimitStrikeProfit': return accessor(new LimitStrikeProfit())! as LimitStrikeProfit;
    case 'ExpirationTimeLeftToBuyLimit': return accessor(new ExpirationTimeLeftToBuyLimit())! as ExpirationTimeLeftToBuyLimit;
    case 'StopOrderEditModeEnabled': return accessor(new StopOrderEditModeEnabled())! as StopOrderEditModeEnabled;
    case 'PrecisionFormat': return accessor(new PrecisionFormat())! as PrecisionFormat;
    case 'DynamicZoomEnabled': return accessor(new DynamicZoomEnabled())! as DynamicZoomEnabled;
    case 'NotificationLevelsEnabled': return accessor(new NotificationLevelsEnabled())! as NotificationLevelsEnabled;
    case 'DealTopUpEnabled': return accessor(new DealTopUpEnabled())! as DealTopUpEnabled;
    case 'colors_ColorScheme': return accessor(new ColorScheme())! as ColorScheme;
    case 'SentimentValue': return accessor(new SentimentValue())! as SentimentValue;
    case 'SentimentEnable': return accessor(new SentimentEnable())! as SentimentEnable;
    case 'HorizontalZoomEnabled': return accessor(new HorizontalZoomEnabled())! as HorizontalZoomEnabled;
    case 'VerticalZoomEnabled': return accessor(new VerticalZoomEnabled())! as VerticalZoomEnabled;
    case 'ScrollEnabled': return accessor(new ScrollEnabled())! as ScrollEnabled;
    default: return null;
  }
}

export function unionListToParams(
  type: Params, 
  accessor: (index: number, obj:Balance|ColorScheme|DealDuration|DealExpiration|DealTopUpEnabled|DynamicZoomEnabled|ExpirationTimeLeftToBuyLimit|HorizontalZoomEnabled|LibType|LimitStrikeProfit|Locale|NotificationLevelsEnabled|OptionProfitDownValue|OptionProfitMeterEnabled|OptionProfitUpValue|PrecisionFormat|ProfitScaleDealAmount|ProfitScaleDealCommission|ProfitScaleDealMultiplier|ProfitScaleEnabled|ScrollEnabled|SentimentEnable|SentimentValue|SetChartStatus|SetChartType|StopOrderEditModeEnabled|TrailingStopLossEnabled|VerticalZoomEnabled) => Balance|ColorScheme|DealDuration|DealExpiration|DealTopUpEnabled|DynamicZoomEnabled|ExpirationTimeLeftToBuyLimit|HorizontalZoomEnabled|LibType|LimitStrikeProfit|Locale|NotificationLevelsEnabled|OptionProfitDownValue|OptionProfitMeterEnabled|OptionProfitUpValue|PrecisionFormat|ProfitScaleDealAmount|ProfitScaleDealCommission|ProfitScaleDealMultiplier|ProfitScaleEnabled|ScrollEnabled|SentimentEnable|SentimentValue|SetChartStatus|SetChartType|StopOrderEditModeEnabled|TrailingStopLossEnabled|VerticalZoomEnabled|null, 
  index: number
): Balance|ColorScheme|DealDuration|DealExpiration|DealTopUpEnabled|DynamicZoomEnabled|ExpirationTimeLeftToBuyLimit|HorizontalZoomEnabled|LibType|LimitStrikeProfit|Locale|NotificationLevelsEnabled|OptionProfitDownValue|OptionProfitMeterEnabled|OptionProfitUpValue|PrecisionFormat|ProfitScaleDealAmount|ProfitScaleDealCommission|ProfitScaleDealMultiplier|ProfitScaleEnabled|ScrollEnabled|SentimentEnable|SentimentValue|SetChartStatus|SetChartType|StopOrderEditModeEnabled|TrailingStopLossEnabled|VerticalZoomEnabled|null {
  switch(Params[type]) {
    case 'NONE': return null; 
    case 'Locale': return accessor(index, new Locale())! as Locale;
    case 'SetChartType': return accessor(index, new SetChartType())! as SetChartType;
    case 'SetChartStatus': return accessor(index, new SetChartStatus())! as SetChartStatus;
    case 'DealDuration': return accessor(index, new DealDuration())! as DealDuration;
    case 'DealExpiration': return accessor(index, new DealExpiration())! as DealExpiration;
    case 'OptionProfitUpValue': return accessor(index, new OptionProfitUpValue())! as OptionProfitUpValue;
    case 'OptionProfitDownValue': return accessor(index, new OptionProfitDownValue())! as OptionProfitDownValue;
    case 'OptionProfitMeterEnabled': return accessor(index, new OptionProfitMeterEnabled())! as OptionProfitMeterEnabled;
    case 'TrailingStopLossEnabled': return accessor(index, new TrailingStopLossEnabled())! as TrailingStopLossEnabled;
    case 'ProfitScaleDealCommission': return accessor(index, new ProfitScaleDealCommission())! as ProfitScaleDealCommission;
    case 'ProfitScaleDealAmount': return accessor(index, new ProfitScaleDealAmount())! as ProfitScaleDealAmount;
    case 'ProfitScaleDealMultiplier': return accessor(index, new ProfitScaleDealMultiplier())! as ProfitScaleDealMultiplier;
    case 'Balance': return accessor(index, new Balance())! as Balance;
    case 'LibType': return accessor(index, new LibType())! as LibType;
    case 'ProfitScaleEnabled': return accessor(index, new ProfitScaleEnabled())! as ProfitScaleEnabled;
    case 'LimitStrikeProfit': return accessor(index, new LimitStrikeProfit())! as LimitStrikeProfit;
    case 'ExpirationTimeLeftToBuyLimit': return accessor(index, new ExpirationTimeLeftToBuyLimit())! as ExpirationTimeLeftToBuyLimit;
    case 'StopOrderEditModeEnabled': return accessor(index, new StopOrderEditModeEnabled())! as StopOrderEditModeEnabled;
    case 'PrecisionFormat': return accessor(index, new PrecisionFormat())! as PrecisionFormat;
    case 'DynamicZoomEnabled': return accessor(index, new DynamicZoomEnabled())! as DynamicZoomEnabled;
    case 'NotificationLevelsEnabled': return accessor(index, new NotificationLevelsEnabled())! as NotificationLevelsEnabled;
    case 'DealTopUpEnabled': return accessor(index, new DealTopUpEnabled())! as DealTopUpEnabled;
    case 'colors_ColorScheme': return accessor(index, new ColorScheme())! as ColorScheme;
    case 'SentimentValue': return accessor(index, new SentimentValue())! as SentimentValue;
    case 'SentimentEnable': return accessor(index, new SentimentEnable())! as SentimentEnable;
    case 'HorizontalZoomEnabled': return accessor(index, new HorizontalZoomEnabled())! as HorizontalZoomEnabled;
    case 'VerticalZoomEnabled': return accessor(index, new VerticalZoomEnabled())! as VerticalZoomEnabled;
    case 'ScrollEnabled': return accessor(index, new ScrollEnabled())! as ScrollEnabled;
    default: return null;
  }
}
