// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ChartStatus } from '../../milky/config/chart-status';


export class SetChartStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetChartStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetChartStatus(bb:flatbuffers.ByteBuffer, obj?:SetChartStatus):SetChartStatus {
  return (obj || new SetChartStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetChartStatus(bb:flatbuffers.ByteBuffer, obj?:SetChartStatus):SetChartStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetChartStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chartStatus():ChartStatus {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : ChartStatus.Unknown;
}

static startSetChartStatus(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addChartStatus(builder:flatbuffers.Builder, chartStatus:ChartStatus) {
  builder.addFieldInt32(0, chartStatus, ChartStatus.Unknown);
}

static endSetChartStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSetChartStatus(builder:flatbuffers.Builder, chartStatus:ChartStatus):flatbuffers.Offset {
  SetChartStatus.startSetChartStatus(builder);
  SetChartStatus.addChartStatus(builder, chartStatus);
  return SetChartStatus.endSetChartStatus(builder);
}

unpack(): SetChartStatusT {
  return new SetChartStatusT(
    this.chartStatus()
  );
}


unpackTo(_o: SetChartStatusT): void {
  _o.chartStatus = this.chartStatus();
}
}

export class SetChartStatusT {
constructor(
  public chartStatus: ChartStatus = ChartStatus.Unknown
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SetChartStatus.createSetChartStatus(builder,
    this.chartStatus
  );
}
}
