// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Locale {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Locale {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLocale(bb:flatbuffers.ByteBuffer, obj?:Locale):Locale {
  return (obj || new Locale()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLocale(bb:flatbuffers.ByteBuffer, obj?:Locale):Locale {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Locale()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

locale():string|null
locale(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locale(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLocale(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addLocale(builder:flatbuffers.Builder, localeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, localeOffset, 0);
}

static endLocale(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLocale(builder:flatbuffers.Builder, localeOffset:flatbuffers.Offset):flatbuffers.Offset {
  Locale.startLocale(builder);
  Locale.addLocale(builder, localeOffset);
  return Locale.endLocale(builder);
}

unpack(): LocaleT {
  return new LocaleT(
    this.locale()
  );
}


unpackTo(_o: LocaleT): void {
  _o.locale = this.locale();
}
}

export class LocaleT {
constructor(
  public locale: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const locale = (this.locale !== null ? builder.createString(this.locale!) : 0);

  return Locale.createLocale(builder,
    locale
  );
}
}
