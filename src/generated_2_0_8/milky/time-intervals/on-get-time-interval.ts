// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Time, TimeT } from '../../milky/model/time';


export class OnGetTimeInterval {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OnGetTimeInterval {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOnGetTimeInterval(bb:flatbuffers.ByteBuffer, obj?:OnGetTimeInterval):OnGetTimeInterval {
  return (obj || new OnGetTimeInterval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOnGetTimeInterval(bb:flatbuffers.ByteBuffer, obj?:OnGetTimeInterval):OnGetTimeInterval {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OnGetTimeInterval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timeInterval():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

timeFrame():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

start(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

end(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startOnGetTimeInterval(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTimeInterval(builder:flatbuffers.Builder, timeInterval:number) {
  builder.addFieldInt32(0, timeInterval, 0);
}

static addTimeFrame(builder:flatbuffers.Builder, timeFrame:number) {
  builder.addFieldInt32(1, timeFrame, 0);
}

static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, startOffset, 0);
}

static addEnd(builder:flatbuffers.Builder, endOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, endOffset, 0);
}

static endOnGetTimeInterval(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // start
  builder.requiredField(offset, 10) // end
  return offset;
}


unpack(): OnGetTimeIntervalT {
  return new OnGetTimeIntervalT(
    this.timeInterval(),
    this.timeFrame(),
    (this.start() !== null ? this.start()!.unpack() : null),
    (this.end() !== null ? this.end()!.unpack() : null)
  );
}


unpackTo(_o: OnGetTimeIntervalT): void {
  _o.timeInterval = this.timeInterval();
  _o.timeFrame = this.timeFrame();
  _o.start = (this.start() !== null ? this.start()!.unpack() : null);
  _o.end = (this.end() !== null ? this.end()!.unpack() : null);
}
}

export class OnGetTimeIntervalT {
constructor(
  public timeInterval: number = 0,
  public timeFrame: number = 0,
  public start: TimeT|null = null,
  public end: TimeT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  OnGetTimeInterval.startOnGetTimeInterval(builder);
  OnGetTimeInterval.addTimeInterval(builder, this.timeInterval);
  OnGetTimeInterval.addTimeFrame(builder, this.timeFrame);
  OnGetTimeInterval.addStart(builder, (this.start !== null ? this.start!.pack(builder) : 0));
  OnGetTimeInterval.addEnd(builder, (this.end !== null ? this.end!.pack(builder) : 0));

  return OnGetTimeInterval.endOnGetTimeInterval(builder);
}
}
