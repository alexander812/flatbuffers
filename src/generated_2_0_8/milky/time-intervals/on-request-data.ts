// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Time, TimeT } from '../../milky/model/time';


export class OnRequestData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OnRequestData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOnRequestData(bb:flatbuffers.ByteBuffer, obj?:OnRequestData):OnRequestData {
  return (obj || new OnRequestData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOnRequestData(bb:flatbuffers.ByteBuffer, obj?:OnRequestData):OnRequestData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OnRequestData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timeFrame():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

start(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startOnRequestData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTimeFrame(builder:flatbuffers.Builder, timeFrame:number) {
  builder.addFieldInt32(0, timeFrame, 0);
}

static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, startOffset, 0);
}

static addCount(builder:flatbuffers.Builder, count:number) {
  builder.addFieldInt32(2, count, 0);
}

static endOnRequestData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // start
  return offset;
}


unpack(): OnRequestDataT {
  return new OnRequestDataT(
    this.timeFrame(),
    (this.start() !== null ? this.start()!.unpack() : null),
    this.count()
  );
}


unpackTo(_o: OnRequestDataT): void {
  _o.timeFrame = this.timeFrame();
  _o.start = (this.start() !== null ? this.start()!.unpack() : null);
  _o.count = this.count();
}
}

export class OnRequestDataT {
constructor(
  public timeFrame: number = 0,
  public start: TimeT|null = null,
  public count: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  OnRequestData.startOnRequestData(builder);
  OnRequestData.addTimeFrame(builder, this.timeFrame);
  OnRequestData.addStart(builder, (this.start !== null ? this.start!.pack(builder) : 0));
  OnRequestData.addCount(builder, this.count);

  return OnRequestData.endOnRequestData(builder);
}
}
