// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SetTimeFrame {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetTimeFrame {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetTimeFrame(bb:flatbuffers.ByteBuffer, obj?:SetTimeFrame):SetTimeFrame {
  return (obj || new SetTimeFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetTimeFrame(bb:flatbuffers.ByteBuffer, obj?:SetTimeFrame):SetTimeFrame {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetTimeFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timeFrame():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startSetTimeFrame(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addTimeFrame(builder:flatbuffers.Builder, timeFrame:number) {
  builder.addFieldInt32(0, timeFrame, 0);
}

static endSetTimeFrame(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSetTimeFrame(builder:flatbuffers.Builder, timeFrame:number):flatbuffers.Offset {
  SetTimeFrame.startSetTimeFrame(builder);
  SetTimeFrame.addTimeFrame(builder, timeFrame);
  return SetTimeFrame.endSetTimeFrame(builder);
}

unpack(): SetTimeFrameT {
  return new SetTimeFrameT(
    this.timeFrame()
  );
}


unpackTo(_o: SetTimeFrameT): void {
  _o.timeFrame = this.timeFrame();
}
}

export class SetTimeFrameT {
constructor(
  public timeFrame: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SetTimeFrame.createSetTimeFrame(builder,
    this.timeFrame
  );
}
}
