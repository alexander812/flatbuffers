// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Candle, CandleT } from '../../milky/model/quotes/candle';


export class UpdateCandle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateCandle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateCandle(bb:flatbuffers.ByteBuffer, obj?:UpdateCandle):UpdateCandle {
  return (obj || new UpdateCandle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateCandle(bb:flatbuffers.ByteBuffer, obj?:UpdateCandle):UpdateCandle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateCandle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

candle(obj?:Candle):Candle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Candle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startUpdateCandle(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addCandle(builder:flatbuffers.Builder, candleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, candleOffset, 0);
}

static endUpdateCandle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // candle
  return offset;
}

static createUpdateCandle(builder:flatbuffers.Builder, candleOffset:flatbuffers.Offset):flatbuffers.Offset {
  UpdateCandle.startUpdateCandle(builder);
  UpdateCandle.addCandle(builder, candleOffset);
  return UpdateCandle.endUpdateCandle(builder);
}

unpack(): UpdateCandleT {
  return new UpdateCandleT(
    (this.candle() !== null ? this.candle()!.unpack() : null)
  );
}


unpackTo(_o: UpdateCandleT): void {
  _o.candle = (this.candle() !== null ? this.candle()!.unpack() : null);
}
}

export class UpdateCandleT {
constructor(
  public candle: CandleT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const candle = (this.candle !== null ? this.candle!.pack(builder) : 0);

  return UpdateCandle.createUpdateCandle(builder,
    candle
  );
}
}
