// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Width {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Width {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWidth(bb:flatbuffers.ByteBuffer, obj?:Width):Width {
  return (obj || new Width()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWidth(bb:flatbuffers.ByteBuffer, obj?:Width):Width {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Width()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startWidth(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat32(0, value, 0.0);
}

static endWidth(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWidth(builder:flatbuffers.Builder, value:number):flatbuffers.Offset {
  Width.startWidth(builder);
  Width.addValue(builder, value);
  return Width.endWidth(builder);
}

unpack(): WidthT {
  return new WidthT(
    this.value()
  );
}


unpackTo(_o: WidthT): void {
  _o.value = this.value();
}
}

export class WidthT {
constructor(
  public value: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Width.createWidth(builder,
    this.value
  );
}
}
