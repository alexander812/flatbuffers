// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { IndicatorId, IndicatorIdT } from '../../milky/model/indicator/indicator-id';


export class RemoveIndicatorMethod {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RemoveIndicatorMethod {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRemoveIndicatorMethod(bb:flatbuffers.ByteBuffer, obj?:RemoveIndicatorMethod):RemoveIndicatorMethod {
  return (obj || new RemoveIndicatorMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRemoveIndicatorMethod(bb:flatbuffers.ByteBuffer, obj?:RemoveIndicatorMethod):RemoveIndicatorMethod {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RemoveIndicatorMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

indicatorId(obj?:IndicatorId):IndicatorId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new IndicatorId()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startRemoveIndicatorMethod(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addIndicatorId(builder:flatbuffers.Builder, indicatorIdOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, indicatorIdOffset, 0);
}

static endRemoveIndicatorMethod(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // indicator_id
  return offset;
}

static createRemoveIndicatorMethod(builder:flatbuffers.Builder, indicatorIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  RemoveIndicatorMethod.startRemoveIndicatorMethod(builder);
  RemoveIndicatorMethod.addIndicatorId(builder, indicatorIdOffset);
  return RemoveIndicatorMethod.endRemoveIndicatorMethod(builder);
}

unpack(): RemoveIndicatorMethodT {
  return new RemoveIndicatorMethodT(
    (this.indicatorId() !== null ? this.indicatorId()!.unpack() : null)
  );
}


unpackTo(_o: RemoveIndicatorMethodT): void {
  _o.indicatorId = (this.indicatorId() !== null ? this.indicatorId()!.unpack() : null);
}
}

export class RemoveIndicatorMethodT {
constructor(
  public indicatorId: IndicatorIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return RemoveIndicatorMethod.createRemoveIndicatorMethod(builder,
    (this.indicatorId !== null ? this.indicatorId!.pack(builder) : 0)
  );
}
}
