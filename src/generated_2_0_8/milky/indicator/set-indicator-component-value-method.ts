// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Value, ValueT } from '../../milky/indicator/value';
import { IndicatorComponentId, IndicatorComponentIdT } from '../../milky/model/indicator/indicator-component-id';
import { IndicatorId, IndicatorIdT } from '../../milky/model/indicator/indicator-id';


export class SetIndicatorComponentValueMethod {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetIndicatorComponentValueMethod {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetIndicatorComponentValueMethod(bb:flatbuffers.ByteBuffer, obj?:SetIndicatorComponentValueMethod):SetIndicatorComponentValueMethod {
  return (obj || new SetIndicatorComponentValueMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetIndicatorComponentValueMethod(bb:flatbuffers.ByteBuffer, obj?:SetIndicatorComponentValueMethod):SetIndicatorComponentValueMethod {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetIndicatorComponentValueMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

indicatorId(obj?:IndicatorId):IndicatorId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new IndicatorId()).__init(this.bb_pos + offset, this.bb!) : null;
}

componentId(obj?:IndicatorComponentId):IndicatorComponentId|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new IndicatorComponentId()).__init(this.bb_pos + offset, this.bb!) : null;
}

values(index: number, obj?:Value):Value|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Value()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSetIndicatorComponentValueMethod(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addIndicatorId(builder:flatbuffers.Builder, indicatorIdOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, indicatorIdOffset, 0);
}

static addComponentId(builder:flatbuffers.Builder, componentIdOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, componentIdOffset, 0);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSetIndicatorComponentValueMethod(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // indicator_id
  builder.requiredField(offset, 6) // component_id
  builder.requiredField(offset, 8) // values
  return offset;
}


unpack(): SetIndicatorComponentValueMethodT {
  return new SetIndicatorComponentValueMethodT(
    (this.indicatorId() !== null ? this.indicatorId()!.unpack() : null),
    (this.componentId() !== null ? this.componentId()!.unpack() : null),
    this.bb!.createObjList(this.values.bind(this), this.valuesLength())
  );
}


unpackTo(_o: SetIndicatorComponentValueMethodT): void {
  _o.indicatorId = (this.indicatorId() !== null ? this.indicatorId()!.unpack() : null);
  _o.componentId = (this.componentId() !== null ? this.componentId()!.unpack() : null);
  _o.values = this.bb!.createObjList(this.values.bind(this), this.valuesLength());
}
}

export class SetIndicatorComponentValueMethodT {
constructor(
  public indicatorId: IndicatorIdT|null = null,
  public componentId: IndicatorComponentIdT|null = null,
  public values: (ValueT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const values = SetIndicatorComponentValueMethod.createValuesVector(builder, builder.createObjectOffsetList(this.values));

  SetIndicatorComponentValueMethod.startSetIndicatorComponentValueMethod(builder);
  SetIndicatorComponentValueMethod.addIndicatorId(builder, (this.indicatorId !== null ? this.indicatorId!.pack(builder) : 0));
  SetIndicatorComponentValueMethod.addComponentId(builder, (this.componentId !== null ? this.componentId!.pack(builder) : 0));
  SetIndicatorComponentValueMethod.addValues(builder, values);

  return SetIndicatorComponentValueMethod.endSetIndicatorComponentValueMethod(builder);
}
}
