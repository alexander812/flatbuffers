// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SetAdviserTimeframeLimitMethod {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetAdviserTimeframeLimitMethod {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetAdviserTimeframeLimitMethod(bb:flatbuffers.ByteBuffer, obj?:SetAdviserTimeframeLimitMethod):SetAdviserTimeframeLimitMethod {
  return (obj || new SetAdviserTimeframeLimitMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetAdviserTimeframeLimitMethod(bb:flatbuffers.ByteBuffer, obj?:SetAdviserTimeframeLimitMethod):SetAdviserTimeframeLimitMethod {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetAdviserTimeframeLimitMethod()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

adviserTimeframeLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isHighLimit():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

static startSetAdviserTimeframeLimitMethod(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAdviserTimeframeLimit(builder:flatbuffers.Builder, adviserTimeframeLimit:number) {
  builder.addFieldInt32(0, adviserTimeframeLimit, 0);
}

static addIsHighLimit(builder:flatbuffers.Builder, isHighLimit:boolean) {
  builder.addFieldInt8(1, +isHighLimit, +true);
}

static endSetAdviserTimeframeLimitMethod(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSetAdviserTimeframeLimitMethod(builder:flatbuffers.Builder, adviserTimeframeLimit:number, isHighLimit:boolean):flatbuffers.Offset {
  SetAdviserTimeframeLimitMethod.startSetAdviserTimeframeLimitMethod(builder);
  SetAdviserTimeframeLimitMethod.addAdviserTimeframeLimit(builder, adviserTimeframeLimit);
  SetAdviserTimeframeLimitMethod.addIsHighLimit(builder, isHighLimit);
  return SetAdviserTimeframeLimitMethod.endSetAdviserTimeframeLimitMethod(builder);
}

unpack(): SetAdviserTimeframeLimitMethodT {
  return new SetAdviserTimeframeLimitMethodT(
    this.adviserTimeframeLimit(),
    this.isHighLimit()
  );
}


unpackTo(_o: SetAdviserTimeframeLimitMethodT): void {
  _o.adviserTimeframeLimit = this.adviserTimeframeLimit();
  _o.isHighLimit = this.isHighLimit();
}
}

export class SetAdviserTimeframeLimitMethodT {
constructor(
  public adviserTimeframeLimit: number = 0,
  public isHighLimit: boolean = true
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SetAdviserTimeframeLimitMethod.createSetAdviserTimeframeLimitMethod(builder,
    this.adviserTimeframeLimit,
    this.isHighLimit
  );
}
}
