// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AdviserId, AdviserIdT } from '../../milky/model/adviser/adviser-id';
import { AdviserModel, AdviserModelT } from '../../milky/model/adviser/adviser-model';


export class AdviserSignal {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AdviserSignal {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAdviserSignal(bb:flatbuffers.ByteBuffer, obj?:AdviserSignal):AdviserSignal {
  return (obj || new AdviserSignal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAdviserSignal(bb:flatbuffers.ByteBuffer, obj?:AdviserSignal):AdviserSignal {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AdviserSignal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

signal(obj?:AdviserModel):AdviserModel|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new AdviserModel()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

id(obj?:AdviserId):AdviserId|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new AdviserId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startAdviserSignal(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSignal(builder:flatbuffers.Builder, signalOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, signalOffset, 0);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOffset, 0);
}

static endAdviserSignal(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // signal
  builder.requiredField(offset, 6) // id
  return offset;
}


unpack(): AdviserSignalT {
  return new AdviserSignalT(
    (this.signal() !== null ? this.signal()!.unpack() : null),
    (this.id() !== null ? this.id()!.unpack() : null)
  );
}


unpackTo(_o: AdviserSignalT): void {
  _o.signal = (this.signal() !== null ? this.signal()!.unpack() : null);
  _o.id = (this.id() !== null ? this.id()!.unpack() : null);
}
}

export class AdviserSignalT {
constructor(
  public signal: AdviserModelT|null = null,
  public id: AdviserIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const signal = (this.signal !== null ? this.signal!.pack(builder) : 0);
  const id = (this.id !== null ? this.id!.pack(builder) : 0);

  AdviserSignal.startAdviserSignal(builder);
  AdviserSignal.addSignal(builder, signal);
  AdviserSignal.addId(builder, id);

  return AdviserSignal.endAdviserSignal(builder);
}
}
