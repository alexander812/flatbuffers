// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ClearData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClearData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClearData(bb:flatbuffers.ByteBuffer, obj?:ClearData):ClearData {
  return (obj || new ClearData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClearData(bb:flatbuffers.ByteBuffer, obj?:ClearData):ClearData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClearData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startClearData(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endClearData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createClearData(builder:flatbuffers.Builder):flatbuffers.Offset {
  ClearData.startClearData(builder);
  return ClearData.endClearData(builder);
}

unpack(): ClearDataT {
  return new ClearDataT();
}


unpackTo(_o: ClearDataT): void {}
}

export class ClearDataT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ClearData.createClearData(builder);
}
}
