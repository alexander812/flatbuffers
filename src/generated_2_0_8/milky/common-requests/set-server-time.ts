// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Time, TimeT } from '../../milky/model/time';


export class SetServerTime {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetServerTime {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetServerTime(bb:flatbuffers.ByteBuffer, obj?:SetServerTime):SetServerTime {
  return (obj || new SetServerTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetServerTime(bb:flatbuffers.ByteBuffer, obj?:SetServerTime):SetServerTime {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetServerTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

time(obj?:Time):Time|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Time()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startSetServerTime(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, timeOffset, 0);
}

static endSetServerTime(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // time
  return offset;
}

static createSetServerTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset):flatbuffers.Offset {
  SetServerTime.startSetServerTime(builder);
  SetServerTime.addTime(builder, timeOffset);
  return SetServerTime.endSetServerTime(builder);
}

unpack(): SetServerTimeT {
  return new SetServerTimeT(
    (this.time() !== null ? this.time()!.unpack() : null)
  );
}


unpackTo(_o: SetServerTimeT): void {
  _o.time = (this.time() !== null ? this.time()!.unpack() : null);
}
}

export class SetServerTimeT {
constructor(
  public time: TimeT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SetServerTime.createSetServerTime(builder,
    (this.time !== null ? this.time!.pack(builder) : 0)
  );
}
}
